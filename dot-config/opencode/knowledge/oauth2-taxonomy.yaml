# OAuth2 Knowledge Taxonomy
# Hierarchical organization of OAuth2 concepts for knowledge management

taxonomy:
  name: "OAuth2 Security Framework"
  version: "1.0.0"
  last_updated: "2025-01-03"
  
  # Top-level knowledge domains
  domains:
    fundamentals:
      name: "OAuth2 Fundamentals"
      level: "beginner"
      estimated_duration: "2-3 weeks"
      prerequisites: ["http_basics", "web_applications"]
      
      categories:
        core_concepts:
          name: "Core Concepts & Terminology"
          topics:
            - oauth2_definition
            - authorization_vs_authentication
            - oauth2_roles
            - token_types
            - scopes_and_permissions
          
        basic_flows:
          name: "Basic Authorization Flows"
          topics:
            - authorization_code_flow
            - client_credentials_flow
            - implicit_flow_legacy
            - flow_selection_criteria
          
        essential_security:
          name: "Essential Security Concepts"
          topics:
            - https_requirement
            - redirect_uri_validation
            - state_parameter
            - token_lifecycle
    
    implementation:
      name: "Modern Implementation Patterns"
      level: "intermediate"
      estimated_duration: "3-4 weeks"
      prerequisites: ["fundamentals"]
      
      categories:
        modern_security:
          name: "Modern Security Patterns"
          topics:
            - pkce_implementation
            - rfc9700_best_practices
            - token_binding_basics
            - secure_storage_patterns
          
        client_patterns:
          name: "Client Implementation Patterns"
          topics:
            - spa_implementation
            - server_side_implementation
            - mobile_implementation
            - client_type_security
          
        integration:
          name: "Integration and Error Handling"
          topics:
            - error_handling_patterns
            - token_refresh_strategies
            - api_integration
            - cors_considerations
    
    advanced_security:
      name: "Advanced Security and Enterprise"
      level: "advanced"
      estimated_duration: "4-6 weeks"
      prerequisites: ["implementation"]
      
      categories:
        attack_mitigation:
          name: "Attack Vectors and Mitigations"
          topics:
            - code_interception_attacks
            - csrf_protection
            - token_replay_attacks
            - redirect_manipulation
            - scope_escalation
          
        advanced_patterns:
          name: "Advanced Security Patterns"
          topics:
            - mtls_implementation
            - dpop_implementation
            - rich_authorization_requests
            - token_exchange_patterns
          
        enterprise_architecture:
          name: "Enterprise Architecture"
          topics:
            - multi_tenant_oauth
            - microservices_patterns
            - federation_patterns
            - scalability_considerations

# Knowledge relationships and dependencies
relationships:
  prerequisites:
    pkce_implementation:
      requires: ["authorization_code_flow", "cryptographic_basics"]
    
    mtls_implementation:
      requires: ["pkce_implementation", "certificate_management"]
    
    enterprise_architecture:
      requires: ["advanced_patterns", "system_design"]
  
  cross_references:
    oauth2_roles:
      related_to: ["authorization_code_flow", "client_credentials_flow"]
    
    token_lifecycle:
      related_to: ["token_refresh_strategies", "secure_storage_patterns"]
    
    pkce_implementation:
      related_to: ["spa_implementation", "mobile_implementation"]

# Learning objectives by level
learning_objectives:
  beginner:
    - "Understand OAuth2 framework purpose and scope"
    - "Identify the four OAuth2 roles and responsibilities"
    - "Explain authorization vs authentication differences"
    - "Describe basic OAuth2 flows"
    - "Recognize appropriate flow selection criteria"
  
  intermediate:
    - "Implement PKCE for enhanced security"
    - "Apply RFC 9700 security best practices"
    - "Handle token lifecycle management"
    - "Implement proper error handling"
    - "Design secure client configurations"
  
  advanced:
    - "Identify and mitigate OAuth2 attack vectors"
    - "Design enterprise-grade OAuth2 architectures"
    - "Implement advanced security patterns"
    - "Handle complex multi-tenant scenarios"
    - "Perform security assessments"

# Quality standards for knowledge content
quality_standards:
  accuracy:
    - "All technical details verified against current RFCs"
    - "Code examples tested and validated"
    - "Security recommendations current with best practices"
  
  completeness:
    - "Covers all essential aspects of each topic"
    - "Includes practical implementation examples"
    - "Addresses common pitfalls and edge cases"
  
  clarity:
    - "Accessible to target audience level"
    - "Uses consistent terminology throughout"
    - "Includes visual diagrams where helpful"
  
  currency:
    - "Updated within 6 months of RFC changes"
    - "Reflects current security recommendations"
    - "Incorporates latest industry best practices"

# Maintenance and evolution framework
maintenance:
  review_schedule:
    monthly: "Security updates and advisories"
    quarterly: "Comprehensive content review"
    annually: "Learning path effectiveness assessment"
    as_needed: "Emergency updates for critical issues"
  
  update_triggers:
    - "New RFC publications"
    - "Security vulnerability discoveries"
    - "Industry best practice evolution"
    - "Technology platform changes"
  
  validation_process:
    - "Expert technical review"
    - "Learner feedback integration"
    - "Real-world implementation validation"
    - "Academic research incorporation"

# Assessment framework
assessments:
  beginner:
    type: "knowledge_check"
    format: ["multiple_choice", "short_answer", "diagram_creation"]
    topics: ["oauth2_roles", "basic_flows", "terminology"]
  
  intermediate:
    type: "practical_implementation"
    format: ["code_implementation", "configuration_tasks", "scenario_analysis"]
    topics: ["pkce_implementation", "error_handling", "client_security"]
  
  advanced:
    type: "security_assessment"
    format: ["architecture_design", "vulnerability_analysis", "implementation_review"]
    topics: ["attack_mitigation", "enterprise_patterns", "security_assessment"]

# Integration with existing knowledge systems
integration:
  bmad_methodology:
    - "Aligns with BMad quality gates"
    - "Supports iterative learning approach"
    - "Integrates with project workflows"
  
  security_standards:
    - "Extends existing security coding standards"
    - "Complements secure development practices"
    - "Supports compliance requirements"
  
  development_workflows:
    - "Integrates with CI/CD security checks"
    - "Supports code review processes"
    - "Enables automated security validation"