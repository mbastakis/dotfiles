{"path":"Extras/Images/Pasted image 20250116222746 1.png","text":"Table 9-4. A comparison of testing approaches (more black squares is better) ELEHY testing tests tests Fast to run EEEER L L] ] |s] [ ] ] |sls) | | js]siu} mOooog ooooo (heaptﬂ[un EEEER L L] ] |s] [ ] ] |sls) | | js]siu} mOooog ooooo Stable and reliable EmEEm [ 111 sl mmmO0 EEO00 mO000 ooooo Eaxy‘ﬂuxe EEEER L L] ] |s] [ ] ] |sls) | | js]siu} mOooog ooooo (he(ksyn‘ax EEEER EEEEE EEEEE EEEER EEEEE EEEEE Check policies [ | lu[alal [ 111 Iul [ 111 Iul EEEEE EEEEE [L1T 1] Check servers work ooooo ooooo [LLLT] EEEEE EEEEE [LTTL] Check other infrastructure ooooo ooooo [ 1 [alufa] EEEED EEEEN [LTTL] works Check all the infrastructure ooooo ooooo ooooo E0000 EEEO0 [LTTL] works together So which testing approach should you use? The answer is: a mix of all of them! Each type of test has strengths and weaknesses, so you have to combine multiple types of tests to be confident your code works as expected. That doesn’t mean that you use all the different types of tests in equal proportion: recall the test pyramid and how, in general, you'll typically want lots of unit tests, fewer integration tests, and only a small number of high-value end-to-end tests. Moreover, you don’t have to add all the","libVersion":"0.5.0","langs":"eng"}