/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  DEFAULT_SETTINGS: () => DEFAULT_SETTINGS,
  default: () => DNPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian15 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DNSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Open dashboard navigator").addButton((btn) => {
      btn.setButtonText("Open").setTooltip("Open dashboard navigator").onClick((evt) => {
        this.plugin.DN_MODAL.open();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Default modal view").setDesc("Select the initial view for this plugin's modal when it opens using its primary ribbon icon.").addDropdown((sel) => {
      this.dropdownDefaultView = sel;
      sel.addOption("1", "Dashboard");
      sel.addOption("2", "Navigator");
      sel.addOption("3", "Tags");
      sel.onChange(async (val) => {
        this.plugin.settings.default_view = parseInt(val);
        this.plugin.DN_MODAL.default_view = this.plugin.settings.default_view;
        await this.plugin.saveSettings();
      }), sel.setValue(this.plugin.settings.default_view.toString());
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.dropdownDefaultView.setValue(DEFAULT_SETTINGS.default_view.toString());
        this.plugin.settings.default_view = DEFAULT_SETTINGS.default_view;
        this.plugin.DN_MODAL.default_view = this.plugin.settings.default_view;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Date format").setDesc("Select date format.").addDropdown((sel) => {
      this.dropdownDateFormat = sel;
      sel.addOption("YYYY-MM-DD HH:mm:ss", "YYYY-MM-DD HH:mm:ss");
      sel.addOption("YYYY-MM-DD HH:mm", "YYYY-MM-DD HH:mm");
      sel.addOption("YYYY-MM-DD", "YYYY-MM-DD");
      sel.addOption("DD/MM/YYYY HH:mm:ss", "DD/MM/YYYY HH:mm:ss");
      sel.addOption("DD/MM/YYYY HH:mm", "DD/MM/YYYY HH:mm");
      sel.addOption("DD/MM/YYYY", "DD/MM/YYYY");
      sel.onChange(async (val) => {
        this.plugin.settings.date_format = val;
        this.plugin.DN_MODAL.date_format = this.plugin.settings.date_format;
        await this.plugin.saveSettings();
      }), sel.setValue(this.plugin.settings.date_format.toString());
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.dropdownDateFormat.setValue(DEFAULT_SETTINGS.date_format.toString());
        this.plugin.settings.date_format = DEFAULT_SETTINGS.date_format;
        this.plugin.DN_MODAL.date_format = this.plugin.settings.date_format;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Font size").setDesc("Select font size in pixels for results and links.").addSlider((sli) => {
      this.sliderFontSize = sli;
      let slider_val;
      if (this.plugin.settings.font_size) {
        slider_val = this.plugin.settings.font_size;
      } else {
        slider_val = DEFAULT_SETTINGS.font_size;
      }
      sli.setDynamicTooltip();
      sli.setLimits(12, 24, 1);
      sli.setValue(slider_val);
      sli.onChange((val) => {
        this.plugin.settings.font_size = val;
        this.plugin.dnSetFontSize(val);
        this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.sliderFontSize.setValue(DEFAULT_SETTINGS.font_size);
        this.plugin.settings.font_size = DEFAULT_SETTINGS.font_size;
        this.plugin.dnSetFontSize(this.plugin.settings.font_size);
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Recent files").setDesc("Dashboard: Number of recent files per category.").addDropdown((sel) => {
      this.dropdownRecentFiles = sel;
      sel.addOption("3", "3");
      sel.addOption("4", "4");
      sel.addOption("5", "5");
      sel.addOption("10", "10");
      sel.onChange(async (val) => {
        this.plugin.settings.num_recent_files = parseInt(val);
        this.plugin.DN_MODAL.num_recent_files = this.plugin.settings.num_recent_files;
        await this.plugin.saveSettings();
      }), sel.setValue(this.plugin.settings.num_recent_files.toString());
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.dropdownRecentFiles.setValue(DEFAULT_SETTINGS.num_recent_files.toString());
        this.plugin.settings.num_recent_files = DEFAULT_SETTINGS.num_recent_files;
        this.plugin.DN_MODAL.num_recent_files = this.plugin.settings.num_recent_files;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Bookmarks").setDesc("Dashboard: Number of bookmarks to display.").addDropdown((sel) => {
      this.dropdownBookmarkedFiles = sel;
      sel.addOption("3", "3");
      sel.addOption("4", "4");
      sel.addOption("5", "5");
      sel.addOption("10", "10");
      sel.onChange(async (val) => {
        this.plugin.settings.num_bookmarked_files = parseInt(val);
        this.plugin.DN_MODAL.num_bookmarked_files = this.plugin.settings.num_bookmarked_files;
        await this.plugin.saveSettings();
      }), sel.setValue(this.plugin.settings.num_bookmarked_files.toString());
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.dropdownBookmarkedFiles.setValue(DEFAULT_SETTINGS.num_bookmarked_files.toString());
        this.plugin.settings.num_bookmarked_files = DEFAULT_SETTINGS.num_bookmarked_files;
        this.plugin.DN_MODAL.num_bookmarked_files = this.plugin.settings.num_bookmarked_files;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Show pie chart panel").setDesc("Dashboard: Displays a pie chart of file types and a count of all files and folders.").addToggle((toggle) => {
      this.togglePieChartModule = toggle;
      toggle.setValue(this.plugin.settings.show_dashboard_piechart).onChange(async (val) => {
        this.plugin.settings.show_dashboard_piechart = val;
        this.plugin.DN_MODAL.show_dashboard_piechart = this.plugin.settings.show_dashboard_piechart;
        await this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.togglePieChartModule.setValue(DEFAULT_SETTINGS.show_dashboard_piechart);
        this.plugin.settings.show_dashboard_piechart = DEFAULT_SETTINGS.show_dashboard_piechart;
        this.plugin.DN_MODAL.show_dashboard_piechart = this.plugin.settings.show_dashboard_piechart;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Search results layout").setDesc("Navigator: Select search results layout.").addDropdown((sel) => {
      this.dropdownTableLayout = sel;
      sel.addOption("dn-tbl-default", "Default");
      sel.addOption("dn-tbl-row", "Row striped");
      sel.addOption("dn-tbl-column", "Column striped");
      sel.addOption("dn-tbl-bordered", "Bordered");
      sel.addOption("dn-tbl-cards", "Cards");
      sel.onChange(async (val) => {
        this.plugin.settings.selected_table_layout = val;
        this.plugin.DN_MODAL.selected_table_layout = this.plugin.settings.selected_table_layout;
        await this.plugin.saveSettings();
      }), sel.setValue(this.plugin.settings.selected_table_layout.toString());
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.dropdownTableLayout.setValue(DEFAULT_SETTINGS.selected_table_layout.toString());
        this.plugin.settings.selected_table_layout = DEFAULT_SETTINGS.selected_table_layout;
        this.plugin.DN_MODAL.selected_table_layout = this.plugin.settings.selected_table_layout;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Files per page").setDesc("Navigator: Number of results per page.").addDropdown((sel) => {
      this.dropdownFilesPerPage = sel;
      sel.addOption("10", "10");
      sel.addOption("20", "20");
      sel.addOption("30", "30");
      sel.addOption("50", "50");
      sel.addOption("100", "100");
      sel.onChange(async (val) => {
        this.plugin.settings.files_per_page = parseInt(val);
        this.plugin.DN_MODAL.files_per_page = this.plugin.settings.files_per_page;
        await this.plugin.saveSettings();
      }), sel.setValue(this.plugin.settings.files_per_page.toString());
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.dropdownFilesPerPage.setValue(DEFAULT_SETTINGS.files_per_page.toString());
        this.plugin.settings.files_per_page = DEFAULT_SETTINGS.files_per_page;
        this.plugin.DN_MODAL.files_per_page = this.plugin.settings.files_per_page;
        this.plugin.saveSettings();
      });
    });
    const headingColumns1 = containerEl.createEl("div", { cls: "setting-item setting-item-heading" });
    const headingColumns2 = headingColumns1.createEl("div", { cls: "setting-item setting-item-info" });
    headingColumns2.createEl("div", { text: "Hidden columns", cls: "setting-item-name" });
    new import_obsidian.Setting(containerEl).setName("Hide: Ext").setDesc("Navigator: Hide file extension column.").addToggle((toggle) => {
      this.toggleHideExtColumn = toggle;
      toggle.setValue(this.plugin.settings.hide_ext).onChange(async (val) => {
        this.plugin.settings.hide_ext = val;
        this.plugin.dnUpdateHideColumn("ext", val);
        await this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.toggleHideExtColumn.setValue(DEFAULT_SETTINGS.hide_ext);
        this.plugin.settings.hide_ext = DEFAULT_SETTINGS.hide_ext;
        this.plugin.dnUpdateHideColumn("ext", DEFAULT_SETTINGS.hide_ext);
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Hide: Path").setDesc("Navigator: Hide path column.").addToggle((toggle) => {
      this.toggleHidePathColumn = toggle;
      toggle.setValue(this.plugin.settings.hide_path).onChange(async (val) => {
        this.plugin.settings.hide_path = val;
        this.plugin.dnUpdateHideColumn("path", val);
        await this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.toggleHidePathColumn.setValue(DEFAULT_SETTINGS.hide_path);
        this.plugin.settings.hide_path = DEFAULT_SETTINGS.hide_path;
        this.plugin.dnUpdateHideColumn("path", DEFAULT_SETTINGS.hide_path);
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Hide: Size").setDesc("Navigator: Hide size column.").addToggle((toggle) => {
      this.toggleHideSizeColumn = toggle;
      toggle.setValue(this.plugin.settings.hide_size).onChange(async (val) => {
        this.plugin.settings.hide_size = val;
        this.plugin.dnUpdateHideColumn("size", val);
        await this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.toggleHideSizeColumn.setValue(DEFAULT_SETTINGS.hide_size);
        this.plugin.settings.hide_size = DEFAULT_SETTINGS.hide_size;
        this.plugin.dnUpdateHideColumn("size", DEFAULT_SETTINGS.hide_size);
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Hide: Date").setDesc("Navigator: Hide date column.").addToggle((toggle) => {
      this.toggleHideDateColumn = toggle;
      toggle.setValue(this.plugin.settings.hide_date).onChange(async (val) => {
        this.plugin.settings.hide_date = val;
        this.plugin.dnUpdateHideColumn("date", val);
        await this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.toggleHideDateColumn.setValue(DEFAULT_SETTINGS.hide_date);
        this.plugin.settings.hide_date = DEFAULT_SETTINGS.hide_date;
        this.plugin.dnUpdateHideColumn("date", DEFAULT_SETTINGS.hide_date);
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Hide: Tags").setDesc("Navigator: Hide tags column.").addToggle((toggle) => {
      this.toggleHideTagsColumn = toggle;
      toggle.setValue(this.plugin.settings.hide_tags).onChange(async (val) => {
        this.plugin.settings.hide_tags = val;
        this.plugin.dnUpdateHideColumn("tags", val);
        await this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.toggleHideTagsColumn.setValue(DEFAULT_SETTINGS.hide_tags);
        this.plugin.settings.hide_tags = DEFAULT_SETTINGS.hide_tags;
        this.plugin.dnUpdateHideColumn("tags", DEFAULT_SETTINGS.hide_tags);
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Hide: Frontmatter").setDesc("Navigator: Hide frontmatter properties column.").addToggle((toggle) => {
      this.toggleHideFrontmatterColumn = toggle;
      toggle.setValue(this.plugin.settings.hide_frontmatter).onChange(async (val) => {
        this.plugin.settings.hide_frontmatter = val;
        this.plugin.dnUpdateHideColumn("frontmatter", val);
        await this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.toggleHideFrontmatterColumn.setValue(DEFAULT_SETTINGS.hide_frontmatter);
        this.plugin.settings.hide_frontmatter = DEFAULT_SETTINGS.hide_frontmatter;
        this.plugin.dnUpdateHideColumn("frontmatter", DEFAULT_SETTINGS.hide_frontmatter);
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Hide: BL (Backlinks)").setDesc("Navigator: Hide backlinks column.").addToggle((toggle) => {
      this.toggleHideBLColumn = toggle;
      toggle.setValue(this.plugin.settings.hide_backlinks).onChange(async (val) => {
        this.plugin.settings.hide_backlinks = val;
        this.plugin.dnUpdateHideColumn("backlinks", val);
        await this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.toggleHideBLColumn.setValue(DEFAULT_SETTINGS.hide_backlinks);
        this.plugin.settings.hide_backlinks = DEFAULT_SETTINGS.hide_backlinks;
        this.plugin.dnUpdateHideColumn("backlinks", DEFAULT_SETTINGS.hide_backlinks);
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Hide: OL (Outgoing links)").setDesc("Navigator: Hide outgoing links column.").addToggle((toggle) => {
      this.toggleHideOLColumn = toggle;
      toggle.setValue(this.plugin.settings.hide_outgoing).onChange(async (val) => {
        this.plugin.settings.hide_outgoing = val;
        this.plugin.dnUpdateHideColumn("outgoing", val);
        await this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.toggleHideOLColumn.setValue(DEFAULT_SETTINGS.hide_outgoing);
        this.plugin.settings.hide_outgoing = DEFAULT_SETTINGS.hide_outgoing;
        this.plugin.dnUpdateHideColumn("outgoing", DEFAULT_SETTINGS.hide_outgoing);
        this.plugin.saveSettings();
      });
    });
    const headingImageThumbnails1 = containerEl.createEl("div", { cls: "setting-item setting-item-heading" });
    const headingImageThumbnails2 = headingImageThumbnails1.createEl("div", { cls: "setting-item setting-item-info" });
    headingImageThumbnails2.createEl("div", { text: "Image thumbnails", cls: "setting-item-name" });
    new import_obsidian.Setting(containerEl).setName("Show image thumbnails").setDesc("Navigator: Activate to show image thumbnails. Deactivate to show image icons.").addToggle((toggle) => {
      this.toggleImageThumbnail = toggle;
      toggle.setValue(this.plugin.settings.image_thumbnail).onChange(async (val) => {
        this.plugin.settings.image_thumbnail = val;
        this.plugin.DN_MODAL.image_thumbnail = this.plugin.settings.image_thumbnail;
        await this.plugin.saveSettings();
        await this.plugin.DN_MODAL.dnRedrawResultsTable();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.toggleImageThumbnail.setValue(DEFAULT_SETTINGS.image_thumbnail);
        this.plugin.settings.image_thumbnail = DEFAULT_SETTINGS.image_thumbnail;
        this.plugin.DN_MODAL.image_thumbnail = this.plugin.settings.image_thumbnail;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Image thumbnails size").setDesc("Navigator: Adjust image thumbnails size").addSlider((sliderThumbnail) => {
      this.sliderImageThumbnail = sliderThumbnail;
      let slider_val;
      if (this.plugin.settings.thumbnail_size) {
        slider_val = this.plugin.settings.thumbnail_size;
      } else {
        slider_val = DEFAULT_SETTINGS.thumbnail_size;
      }
      sliderThumbnail.setDynamicTooltip();
      sliderThumbnail.setLimits(50, 500, 1);
      sliderThumbnail.setValue(slider_val);
      sliderThumbnail.onChange((val) => {
        this.plugin.settings.thumbnail_size = val;
        this.plugin.dnSetThumbnailSize(val);
        this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.sliderImageThumbnail.setValue(DEFAULT_SETTINGS.thumbnail_size);
        this.plugin.settings.thumbnail_size = DEFAULT_SETTINGS.thumbnail_size;
        this.plugin.dnSetThumbnailSize(this.plugin.settings.thumbnail_size);
        this.plugin.saveSettings();
      });
    });
    const headingExcludedFilesFolders1 = containerEl.createEl("div", { cls: "setting-item setting-item-heading" });
    const headingExcludedFilesFolders2 = headingExcludedFilesFolders1.createEl("div", { cls: "setting-item setting-item-info" });
    headingExcludedFilesFolders2.createEl("div", { text: "Excluded files and folders", cls: "setting-item-name" });
    new import_obsidian.Setting(containerEl).setName("Excluded file extensions").setDesc("File extensions to exclude, separated by commas.").addText((text) => {
      this.textExcludedExtensions = text;
      text.setPlaceholder("File extensions to exclude").setValue(this.plugin.settings.excluded_ext).onChange(async (val) => {
        this.plugin.settings.excluded_ext = val;
        this.plugin.DN_MODAL.excluded_extensions = this.plugin.dnGetExcludedExtensions(val);
        await this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.textExcludedExtensions.setValue("");
        this.plugin.settings.excluded_ext = "";
        this.plugin.DN_MODAL.excluded_extensions = [];
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Excluded folders").setDesc("List of folder paths to exclude, separated by commas.").addText((text) => {
      this.textExcludedFolders = text;
      text.setPlaceholder("Folder paths to exclude").setValue(this.plugin.settings.excluded_path).onChange(async (val) => {
        this.plugin.settings.excluded_path = val;
        this.plugin.DN_MODAL.excluded_folders = this.plugin.dnGetExcludedFolders(val);
        await this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.textExcludedFolders.setValue("");
        this.plugin.settings.excluded_path = "";
        this.plugin.DN_MODAL.excluded_folders = [];
        this.plugin.saveSettings();
      });
    });
    const headingFileColors1 = containerEl.createEl("div", { cls: "setting-item setting-item-heading" });
    const headingFileColors2 = headingFileColors1.createEl("div", { cls: "setting-item setting-item-info" });
    headingFileColors2.createEl("div", { text: "File colors", cls: "setting-item-name" });
    new import_obsidian.Setting(containerEl).setName("Toggle colored files").setDesc("Turn on/off colored files.").addToggle((toggle) => {
      this.toggleColoredFiles = toggle;
      toggle.setValue(this.plugin.settings.colored_files).onChange(async (val) => {
        this.plugin.settings.colored_files = val;
        this.plugin.DN_MODAL.colored_files = val;
        this.plugin.DN_MODAL.dnToggleColoredFiles();
        await this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.toggleColoredFiles.setValue(DEFAULT_SETTINGS.colored_files);
        this.plugin.settings.colored_files = DEFAULT_SETTINGS.colored_files;
        this.plugin.DN_MODAL.colored_files = DEFAULT_SETTINGS.colored_files;
        this.plugin.DN_MODAL.dnToggleColoredFiles();
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Color: Notes").setDesc("Color of notes.").addColorPicker((color) => {
      this.colorCompNotes = color;
      color.setValue(this.plugin.settings.color_notes).onChange(async (val) => {
        this.plugin.settings.color_notes = val;
        this.plugin.DN_MODAL.color_notes = val;
        this.plugin.DN_MODAL.dnSetCustomColors();
        await this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.colorCompNotes.setValue(DEFAULT_SETTINGS.color_notes);
        this.plugin.settings.color_notes = DEFAULT_SETTINGS.color_notes;
        this.plugin.DN_MODAL.color_notes = DEFAULT_SETTINGS.color_notes;
        this.plugin.DN_MODAL.dnSetCustomColors();
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Color: Canvases").setDesc("Color of canvases.").addColorPicker((color) => {
      this.colorCompCanvas = color;
      color.setValue(this.plugin.settings.color_canvas).onChange(async (val) => {
        this.plugin.settings.color_canvas = val;
        this.plugin.DN_MODAL.color_canvas = val;
        this.plugin.DN_MODAL.dnSetCustomColors();
        await this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.colorCompCanvas.setValue(DEFAULT_SETTINGS.color_canvas);
        this.plugin.settings.color_canvas = DEFAULT_SETTINGS.color_canvas;
        this.plugin.DN_MODAL.color_canvas = DEFAULT_SETTINGS.color_canvas;
        this.plugin.DN_MODAL.dnSetCustomColors();
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Color: Images").setDesc("Color of images.").addColorPicker((color) => {
      this.colorCompImages = color;
      color.setValue(this.plugin.settings.color_images).onChange(async (val) => {
        this.plugin.settings.color_images = val;
        this.plugin.DN_MODAL.color_images = val;
        this.plugin.DN_MODAL.dnSetCustomColors();
        await this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.colorCompImages.setValue(DEFAULT_SETTINGS.color_images);
        this.plugin.settings.color_images = DEFAULT_SETTINGS.color_images;
        this.plugin.DN_MODAL.color_images = DEFAULT_SETTINGS.color_images;
        this.plugin.DN_MODAL.dnSetCustomColors();
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Color: Videos").setDesc("Color of videos.").addColorPicker((color) => {
      this.colorCompVideos = color;
      color.setValue(this.plugin.settings.color_videos).onChange(async (val) => {
        this.plugin.settings.color_videos = val;
        this.plugin.DN_MODAL.color_videos = val;
        this.plugin.DN_MODAL.dnSetCustomColors();
        await this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.colorCompVideos.setValue(DEFAULT_SETTINGS.color_videos);
        this.plugin.settings.color_videos = DEFAULT_SETTINGS.color_videos;
        this.plugin.DN_MODAL.color_videos = DEFAULT_SETTINGS.color_videos;
        this.plugin.DN_MODAL.dnSetCustomColors();
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Color: Audio files").setDesc("Color of audio files.").addColorPicker((color) => {
      this.colorCompAudios = color;
      color.setValue(this.plugin.settings.color_audios).onChange(async (val) => {
        this.plugin.settings.color_audios = val;
        this.plugin.DN_MODAL.color_audios = val;
        this.plugin.DN_MODAL.dnSetCustomColors();
        await this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.colorCompAudios.setValue(DEFAULT_SETTINGS.color_audios);
        this.plugin.settings.color_audios = DEFAULT_SETTINGS.color_audios;
        this.plugin.DN_MODAL.color_audios = DEFAULT_SETTINGS.color_audios;
        this.plugin.DN_MODAL.dnSetCustomColors();
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Color: PDF").setDesc("Color of PDF files.").addColorPicker((color) => {
      this.colorCompPdf = color;
      color.setValue(this.plugin.settings.color_pdf).onChange(async (val) => {
        this.plugin.settings.color_pdf = val;
        this.plugin.DN_MODAL.color_pdf = val;
        this.plugin.DN_MODAL.dnSetCustomColors();
        await this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.colorCompPdf.setValue(DEFAULT_SETTINGS.color_pdf);
        this.plugin.settings.color_pdf = DEFAULT_SETTINGS.color_pdf;
        this.plugin.DN_MODAL.color_pdf = DEFAULT_SETTINGS.color_pdf;
        this.plugin.DN_MODAL.dnSetCustomColors();
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Color: Bases").setDesc("Color of .base files.").addColorPicker((color) => {
      this.colorCompBases = color;
      color.setValue(this.plugin.settings.color_bases).onChange(async (val) => {
        this.plugin.settings.color_bases = val;
        this.plugin.DN_MODAL.color_bases = val;
        this.plugin.DN_MODAL.dnSetCustomColors();
        await this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.colorCompBases.setValue(DEFAULT_SETTINGS.color_bases);
        this.plugin.settings.color_bases = DEFAULT_SETTINGS.color_bases;
        this.plugin.DN_MODAL.color_bases = DEFAULT_SETTINGS.color_bases;
        this.plugin.DN_MODAL.dnSetCustomColors();
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Color: Other files").setDesc("Color of other files.").addColorPicker((color) => {
      this.colorCompOther = color;
      color.setValue(this.plugin.settings.color_other).onChange(async (val) => {
        this.plugin.settings.color_other = val;
        this.plugin.DN_MODAL.color_other = val;
        this.plugin.DN_MODAL.dnSetCustomColors();
        await this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.colorCompOther.setValue(DEFAULT_SETTINGS.color_other);
        this.plugin.settings.color_other = DEFAULT_SETTINGS.color_other;
        this.plugin.DN_MODAL.color_other = DEFAULT_SETTINGS.color_other;
        this.plugin.DN_MODAL.dnSetCustomColors();
        this.plugin.saveSettings();
      });
    });
  }
};

// src/dn.ts
var import_obsidian7 = require("obsidian");

// src/utils/format.ts
function formatFileSize(fileSize) {
  if (fileSize === 0) {
    return "0";
  }
  const formattedSize = fileSize.toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  return formattedSize;
}
function getFolderStructure(folder) {
  const folders = folder.split("/").slice(0, -1);
  if (folders.length === 0) {
    return "/";
  }
  return "/" + folders.join("/");
}
function formatFileSizeKBMB(total_bytes) {
  if (total_bytes < 1024) {
    return "";
  } else if (total_bytes < 1048576) {
    return ` (${(total_bytes / 1024).toFixed(2)} KB)`;
  } else {
    return ` (${(total_bytes / (1024 * 1024)).toFixed(2)} MB)`;
  }
}

// src/utils/tags.ts
function getTagsPerFile(file) {
  var _a, _b;
  const cur_file = this.app.vault.getAbstractFileByPath(file.path);
  if (cur_file !== null) {
    const tags = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.tags;
    const frontmatter_tags = (_b = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _b.frontmatter;
    const arrTags = [];
    if (tags) {
      for (let i = 0, len = tags.length; i < len; i++) {
        if (arrTags.indexOf(tags[i].tag) < 0) {
          arrTags.push(tags[i].tag);
        }
      }
    }
    if (frontmatter_tags !== void 0 && frontmatter_tags.tags) {
      for (let i = 0, len = frontmatter_tags.tags.length; i < len; i++) {
        const fmTag = "#" + frontmatter_tags.tags[i];
        if (arrTags.indexOf(fmTag) < 0) {
          arrTags.push(fmTag);
        }
      }
    }
    return arrTags.join(" ");
  } else {
    return "";
  }
}
function getPropsPerFile(file) {
  const fileProperties = [];
  const cache = this.app.metadataCache.getFileCache(file);
  if (cache == null ? void 0 : cache.frontmatter) {
    for (const [key, value] of Object.entries(cache.frontmatter)) {
      fileProperties.push(`'${key}: ${value}'`);
    }
  }
  return fileProperties.join(" \n");
}

// src/utils/dnpiechart.ts
var DNPieChart = class {
  constructor(canvas, margin = 10, fontSize = 12, legendWidth = 50, labelColor = "#828282") {
    this._canvas = canvas;
    const ctx = canvas.getContext("2d");
    if (ctx) {
      this._ctx = ctx;
    }
    this._data = [];
    this._margin = margin;
    this._fontSize = fontSize;
    this._legendWidth = legendWidth;
    this._labelColor = labelColor;
  }
  addData(value, color, label) {
    this._data.push({ value, color, label });
  }
  draw() {
    const { width, height } = this._canvas;
    const availWidth = width - 2 * this._margin;
    const availHeight = height - 2 * this._margin;
    const scale = Math.min(availWidth / width, availHeight / height);
    const radius = Math.min(availWidth, availHeight) / 2 * scale;
    this._cX = width / 2;
    this._cY = height / 2;
    this._ctx.clearRect(0, 0, width, height);
    const totalValue = this._data.reduce((acc, curr) => acc + curr.value, 0);
    let currentAngle = -Math.PI / 2;
    this._data.forEach((slice) => {
      const sliceAngle = slice.value / totalValue * 2 * Math.PI;
      this.drawSlice(radius, sliceAngle, slice.color, currentAngle);
      currentAngle += sliceAngle;
    });
    this.drawLegend(2, 20);
  }
  drawSlice(radius, sliceAngle, color, startAngle) {
    this._ctx.beginPath();
    this._ctx.arc(this._cX, this._cY, radius, startAngle, startAngle + sliceAngle);
    this._ctx.lineTo(this._cX, this._cY);
    this._ctx.fillStyle = color;
    this._ctx.closePath();
    this._ctx.fill();
  }
  drawLegend(x, y) {
    const lineHeight = this._fontSize + 5;
    this._data.forEach((slice, index) => {
      const textX = x + this._legendWidth / 5;
      const textY = y + index * lineHeight - 10;
      this._ctx.fillStyle = slice.color;
      this._ctx.fillRect(textX - 10, textY, 5, 5);
      this._ctx.fillStyle = this._labelColor;
      this._ctx.font = `${this._fontSize}px sans-serif`;
      this._ctx.fillText(`${slice.label} (${slice.value})`, textX, textY + 8);
    });
  }
};

// src/utils/dntablemanager.ts
var DNTableManager = class {
  constructor(tbl) {
    this.table = null;
    const navTable = document.querySelector(tbl);
    if (navTable) {
      this.table = navTable;
    }
  }
  getCells() {
    if (!this.table) {
      return document.createElement("div").querySelectorAll("td, th");
    }
    return this.table.querySelectorAll("td, th");
  }
  hideColumns(columnNames) {
    if (!this.table) {
      return;
    }
    const cells = this.getCells();
    const availableColumnNames = this.getColumnNames();
    const numColumns = availableColumnNames.length;
    if (columnNames.length === 0) {
      for (let i = 0, len = cells.length; i < len; i++) {
        cells[i].classList.remove("dn-hidden");
      }
    } else {
      for (let i = 0, len = cells.length; i < len; i++) {
        const colIndex = i % numColumns;
        const columnName = availableColumnNames[colIndex];
        if (columnNames.includes(columnName)) {
          cells[i].classList.add("dn-hidden");
        } else {
          cells[i].classList.remove("dn-hidden");
        }
      }
    }
  }
  getColumnNames() {
    return ["thumbnail", "name", "ext", "path", "size", "date", "tags", "frontmatter", "backlinks", "outgoing"];
  }
};

// src/dn.ts
var import_obsidian8 = require("obsidian");

// src/utils/dntagsuggestions.ts
var import_obsidian2 = require("obsidian");
var DNTagSuggestions = class extends import_obsidian2.AbstractInputSuggest {
  // All tags like #tagName
  constructor(app, inputEl, allTags) {
    super(app, inputEl);
    this.inputEl = inputEl;
    this.allTags = allTags;
  }
  getActiveTagInfo(query) {
    const cursorPosition = this.inputEl.selectionStart || 0;
    const textBeforeCursor = query.substring(0, cursorPosition);
    const lastSpaceIndex = textBeforeCursor.lastIndexOf(" ");
    const currentWordStart = lastSpaceIndex === -1 ? 0 : lastSpaceIndex + 1;
    const currentWord = textBeforeCursor.substring(currentWordStart);
    let prefix = "";
    let typedTag = "";
    let startIndex = -1;
    if (currentWord.startsWith("!#")) {
      prefix = "!#";
      typedTag = currentWord.substring(2);
      startIndex = currentWordStart;
    } else if (currentWord.startsWith("#")) {
      prefix = "#";
      typedTag = currentWord.substring(1);
      startIndex = currentWordStart;
    } else {
      return null;
    }
    return { prefix, typedTag, startIndex };
  }
  getSuggestions(query) {
    const tagInfo = this.getActiveTagInfo(query);
    if (!tagInfo) {
      return [];
    }
    const { typedTag } = tagInfo;
    if (typedTag.length === 0) {
      return [];
    }
    return this.allTags.filter((fullTagWithHash) => {
      const tagWithoutHash = fullTagWithHash.substring(1);
      return tagWithoutHash.toLowerCase().startsWith(typedTag.toLowerCase());
    }).map((fullTagWithHash) => fullTagWithHash.substring(1));
  }
  renderSuggestion(tagWithoutHash, el) {
    const query = this.inputEl.value;
    const tagInfo = this.getActiveTagInfo(query);
    if (!tagInfo) {
      el.createEl("div", { text: tagWithoutHash });
      return;
    }
    const { prefix, typedTag } = tagInfo;
    const fullTagToDisplay = prefix + tagWithoutHash;
    const matchIndex = tagWithoutHash.toLowerCase().indexOf(typedTag.toLowerCase());
    if (matchIndex === -1) {
      el.createEl("div", { text: fullTagToDisplay });
      return;
    }
    const suggestionEl = el.createEl("div");
    suggestionEl.createSpan({ text: prefix });
    suggestionEl.createSpan({ text: tagWithoutHash.substring(0, matchIndex) });
    suggestionEl.createSpan({
      cls: "suggestion-highlight",
      text: tagWithoutHash.substring(matchIndex, matchIndex + typedTag.length)
    });
    suggestionEl.createSpan({ text: tagWithoutHash.substring(matchIndex + typedTag.length) });
  }
  selectSuggestion(tagWithoutHash, evt) {
    const query = this.inputEl.value;
    const tagInfo = this.getActiveTagInfo(query);
    if (!tagInfo) {
      this.close();
      return;
    }
    const { prefix, startIndex } = tagInfo;
    const textBeforeCurrentWord = query.substring(0, startIndex);
    const textAfterCurrentWord = query.substring(this.inputEl.selectionStart || 0);
    const newValue = `${textBeforeCurrentWord}${prefix}${tagWithoutHash} ${textAfterCurrentWord}`;
    this.inputEl.value = newValue;
    const newCursorPos = textBeforeCurrentWord.length + prefix.length + tagWithoutHash.length + 1;
    this.inputEl.setSelectionRange(newCursorPos, newCursorPos);
    const inputEvent = new Event("input", { bubbles: true });
    this.inputEl.dispatchEvent(inputEvent);
    this.close();
  }
};

// src/utils/dnlinks.ts
var import_obsidian3 = require("obsidian");
function getBacklinksToFile(file) {
  const currentFilePath = file.path;
  const backlinks = [];
  try {
    const resolvedLinks = this.app.metadataCache.resolvedLinks;
    for (const [sourceFilePath, linkMap] of Object.entries(resolvedLinks)) {
      if (Object.keys(linkMap).includes(currentFilePath)) {
        const sourceFile = this.app.vault.getAbstractFileByPath(sourceFilePath);
        if (sourceFile instanceof import_obsidian3.TFile) {
          backlinks.push(sourceFile);
        }
      }
    }
    return backlinks;
  } catch (error) {
    return [];
  }
}
function getOutgoingLinks(file) {
  const outgoingLinks = /* @__PURE__ */ new Set();
  const metadataCache = this.app.metadataCache;
  const fileCache = metadataCache.getFileCache(file);
  if (fileCache && fileCache.links) {
    for (const link of fileCache.links) {
      const linkedFile = metadataCache.getFirstLinkpathDest(link.link, file.path);
      if (linkedFile instanceof import_obsidian3.TFile) {
        outgoingLinks.add(linkedFile);
      }
    }
  }
  if (fileCache && fileCache.embeds) {
    for (const embed of fileCache.embeds) {
      const embeddedFile = metadataCache.getFirstLinkpathDest(embed.link, file.path);
      if (embeddedFile instanceof import_obsidian3.TFile) {
        outgoingLinks.add(embeddedFile);
      }
    }
  }
  return Array.from(outgoingLinks);
}

// src/modals/dnspecialbacklinksmodal.ts
var import_obsidian5 = require("obsidian");

// src/utils/dnpreviewcomponent.ts
var import_obsidian4 = require("obsidian");
var DNPreviewComponent = class extends import_obsidian4.Component {
  constructor(app, containerEl, file) {
    super();
    this.app = app;
    this.containerEl = containerEl;
    this.file = file;
  }
  async onload() {
    this.containerEl.empty();
    try {
      import_obsidian4.MarkdownRenderer.render(
        this.app,
        "![[" + (0, import_obsidian4.normalizePath)(this.file.path) + "]]",
        this.containerEl,
        (0, import_obsidian4.normalizePath)(this.file.path),
        this
      );
    } catch (error) {
      return;
    }
  }
};

// src/modals/dnspecialbacklinksmodal.ts
var ITEMS_PER_PAGE = 5;
var DNSpecialBacklinksModal = class extends import_obsidian5.Modal {
  constructor(app, modal, _targetFile) {
    super(app);
    this._previewComponents = [];
    this._currentPage = 1;
    this._targetFile = _targetFile;
    this._backlinks = getBacklinksToFile(this._targetFile);
    this._backlinks.sort((a, b) => b.stat.mtime - a.stat.mtime);
    this._dn_modal = modal;
  }
  onOpen() {
    this.renderContent();
  }
  onClose() {
    const { contentEl } = this;
    this._previewComponents.forEach((comp) => comp.onunload());
    this._previewComponents = [];
    contentEl.empty();
  }
  reloadContent() {
    this._backlinks = getBacklinksToFile(this._targetFile);
    this._backlinks.sort((a, b) => b.stat.mtime - a.stat.mtime);
    this.renderContent();
  }
  renderContent() {
    const { contentEl } = this;
    contentEl.empty();
    const topStickyContainer = contentEl.createEl("div", { cls: "dn-modal-sticky" });
    const btnClosePreview = topStickyContainer.createEl("div", { cls: "modal-close-button" });
    btnClosePreview.onClickEvent(() => {
      this.close();
    });
    topStickyContainer.createEl("div", { text: "Backlinks", cls: "setting-item setting-item-heading dn-modal-heading" });
    const rowName = topStickyContainer.createEl("div", { cls: "dn-property-row" });
    rowName.createEl("div", { text: "Target file: ", cls: "dn-property-name" });
    rowName.createEl("div", { text: this._targetFile.name, cls: "dn-property-value" });
    const rowPath = topStickyContainer.createEl("div", { cls: "dn-property-row" });
    rowPath.createEl("div", { text: "Path: ", cls: "dn-property-name" });
    rowPath.createEl("div", { text: getFolderStructure(this._targetFile.path), cls: "dn-property-value" });
    const rowTotalBacklinks = topStickyContainer.createEl("div", { cls: "dn-property-row" });
    rowTotalBacklinks.createEl("div", { text: "Total: ", cls: "dn-property-name" });
    const total_backlinks = this._backlinks.length;
    let total_backlinks_string = "";
    if (total_backlinks === 1) {
      total_backlinks_string = this._backlinks.length.toString() + " backlink";
    } else {
      total_backlinks_string = this._backlinks.length.toString() + " backlinks";
    }
    rowTotalBacklinks.createEl("div", { text: total_backlinks_string, cls: "dn-property-value" });
    this.renderPagination(topStickyContainer);
    const listContainer = contentEl.createEl("div", { cls: "dn-links-list-container" });
    if (this._backlinks.length === 0) {
      listContainer.createEl("div", { text: "No backlinks found." });
      return;
    }
    const startIndex = (this._currentPage - 1) * ITEMS_PER_PAGE;
    const endIndex = startIndex + ITEMS_PER_PAGE;
    const paginatedBacklinks = this._backlinks.slice(startIndex, endIndex);
    paginatedBacklinks.forEach((backlinkFile) => {
      const listItemDiv = listContainer.createEl("div", { cls: "dn-links-list-item" });
      const fileHeader = listItemDiv.createEl("div", { text: backlinkFile.path, cls: "dn-link-file-header" });
      const contentPreviewEl = listItemDiv.createEl("div", { cls: "dn-link-preview" });
      const previewComponent = new DNPreviewComponent(this.app, contentPreviewEl, backlinkFile);
      this._previewComponents.push(previewComponent);
      previewComponent.onload();
      fileHeader.addEventListener("click", (evt) => {
        evt.preventDefault();
        this.app.workspace.openLinkText(backlinkFile.path, this._targetFile.path);
        this.close();
        this._dn_modal.close();
      });
      fileHeader.addEventListener("contextmenu", (evt) => {
        const menu = new import_obsidian5.Menu();
        menu.addItem((item) => {
          item.setTitle("Open").setIcon("mouse-pointer-2").onClick(() => {
            this.app.workspace.openLinkText(backlinkFile.path, this._targetFile.path);
            this.close();
            this._dn_modal.close();
          });
        });
        menu.addSeparator();
        menu.addItem((item) => {
          item.setTitle("Open in new tab").setIcon("file-plus").onClick(() => {
            this.app.workspace.openLinkText(backlinkFile.path, this._targetFile.path, "tab");
          });
        });
        menu.addItem((item) => {
          item.setTitle("Open to the right").setIcon("separator-vertical").onClick(() => {
            this.app.workspace.openLinkText(backlinkFile.path, this._targetFile.path, "split");
          });
        });
        menu.addItem((item) => {
          item.setTitle("Open in new window").setIcon("picture-in-picture-2").onClick(() => {
            this.app.workspace.openLinkText(backlinkFile.path, this._targetFile.path, "window");
          });
        });
        menu.showAtMouseEvent(evt);
      });
    });
  }
  renderPagination(parentEl) {
    const totalPages = Math.ceil(this._backlinks.length / ITEMS_PER_PAGE);
    const paginationDiv = parentEl.createEl("div", { cls: "dn-modal-sticky-pagination" });
    if (totalPages > 0) {
      const btnReload = paginationDiv.createEl("button", { cls: "dn-btn-next", text: "Reload", title: "Reload content" });
      btnReload.addEventListener("click", () => {
        this.reloadContent();
      });
      paginationDiv.createEl("span", {
        text: `Page ${this._currentPage} of ${totalPages}`,
        cls: "pagination-status"
      });
      const btnPrev = paginationDiv.createEl("button", { cls: "dn-btn-prev", text: "\u25C0", title: "Previous" });
      btnPrev.disabled = this._currentPage === 1;
      btnPrev.addEventListener("click", () => {
        this._currentPage -= 1;
        this.renderContent();
      });
      const btnNext = paginationDiv.createEl("button", { cls: "dn-btn-next", text: "\u25B6", title: "Next" });
      btnNext.disabled = this._currentPage === totalPages;
      btnNext.addEventListener("click", () => {
        this._currentPage += 1;
        this.renderContent();
      });
    }
  }
};

// src/modals/dnspecialoutgoinglinksmodal.ts
var import_obsidian6 = require("obsidian");
var ITEMS_PER_PAGE2 = 5;
var DNSpecialOutgoingLinksModal = class extends import_obsidian6.Modal {
  constructor(app, modal, _originFile) {
    super(app);
    this._previewComponents = [];
    this._currentPage = 1;
    this._originFile = _originFile;
    this._outgoingLinks = getOutgoingLinks(this._originFile);
    this._outgoingLinks.sort((a, b) => b.stat.mtime - a.stat.mtime);
    this._dn_modal = modal;
  }
  onOpen() {
    this.renderContent();
  }
  onClose() {
    const { contentEl } = this;
    this._previewComponents.forEach((comp) => comp.onunload());
    this._previewComponents = [];
    contentEl.empty();
  }
  reloadContent() {
    this._outgoingLinks = getOutgoingLinks(this._originFile);
    this._outgoingLinks.sort((a, b) => b.stat.mtime - a.stat.mtime);
    this.renderContent();
  }
  renderContent() {
    const { contentEl } = this;
    contentEl.empty();
    const topStickyContainer = contentEl.createEl("div", { cls: "dn-modal-sticky" });
    const btnClosePreview = topStickyContainer.createEl("div", { cls: "modal-close-button" });
    btnClosePreview.onClickEvent(() => {
      this.close();
    });
    topStickyContainer.createEl("div", { text: "Outgoing links", cls: "setting-item setting-item-heading dn-modal-heading" });
    const rowName = topStickyContainer.createEl("div", { cls: "dn-property-row" });
    rowName.createEl("div", { text: "Origin file: ", cls: "dn-property-name" });
    rowName.createEl("div", { text: this._originFile.name, cls: "dn-property-value" });
    const rowPath = topStickyContainer.createEl("div", { cls: "dn-property-row" });
    rowPath.createEl("div", { text: "Path: ", cls: "dn-property-name" });
    rowPath.createEl("div", { text: getFolderStructure(this._originFile.path), cls: "dn-property-value" });
    const rowTotalOutgoingLinks = topStickyContainer.createEl("div", { cls: "dn-property-row" });
    rowTotalOutgoingLinks.createEl("div", { text: "Total: ", cls: "dn-property-name" });
    const total_olinks = this._outgoingLinks.length;
    let total_olinks_string = "";
    if (total_olinks === 1) {
      total_olinks_string = this._outgoingLinks.length.toString() + " outgoing link";
    } else {
      total_olinks_string = this._outgoingLinks.length.toString() + " outgoing links";
    }
    rowTotalOutgoingLinks.createEl("div", { text: total_olinks_string, cls: "dn-property-value" });
    this.renderPagination(topStickyContainer);
    const listContainer = contentEl.createEl("div", { cls: "dn-links-list-container" });
    if (this._outgoingLinks.length === 0) {
      listContainer.createEl("div", { text: "No outgoing links found." });
      return;
    }
    const startIndex = (this._currentPage - 1) * ITEMS_PER_PAGE2;
    const endIndex = startIndex + ITEMS_PER_PAGE2;
    const paginatedOLinks = this._outgoingLinks.slice(startIndex, endIndex);
    paginatedOLinks.forEach((oLinkFile) => {
      const listItemDiv = listContainer.createEl("div", { cls: "dn-links-list-item" });
      const fileHeader = listItemDiv.createEl("div", { text: oLinkFile.path, cls: "dn-link-file-header" });
      const contentPreviewEl = listItemDiv.createEl("div", { cls: "dn-link-preview" });
      const previewComponent = new DNPreviewComponent(this.app, contentPreviewEl, oLinkFile);
      this._previewComponents.push(previewComponent);
      previewComponent.onload();
      fileHeader.addEventListener("click", (evt) => {
        evt.preventDefault();
        this.app.workspace.openLinkText(oLinkFile.path, this._originFile.path);
        this.close();
        this._dn_modal.close();
      });
      fileHeader.addEventListener("contextmenu", (evt) => {
        const menu = new import_obsidian6.Menu();
        menu.addItem((item) => {
          item.setTitle("Open").setIcon("mouse-pointer-2").onClick(() => {
            this.app.workspace.openLinkText(oLinkFile.path, this._originFile.path);
            this.close();
            this._dn_modal.close();
          });
        });
        menu.addSeparator();
        menu.addItem((item) => {
          item.setTitle("Open in new tab").setIcon("file-plus").onClick(() => {
            this.app.workspace.openLinkText(oLinkFile.path, this._originFile.path, "tab");
          });
        });
        menu.addItem((item) => {
          item.setTitle("Open to the right").setIcon("separator-vertical").onClick(() => {
            this.app.workspace.openLinkText(oLinkFile.path, this._originFile.path, "split");
          });
        });
        menu.addItem((item) => {
          item.setTitle("Open in new window").setIcon("picture-in-picture-2").onClick(() => {
            this.app.workspace.openLinkText(oLinkFile.path, this._originFile.path, "window");
          });
        });
        menu.showAtMouseEvent(evt);
      });
    });
  }
  renderPagination(parentEl) {
    const totalPages = Math.ceil(this._outgoingLinks.length / ITEMS_PER_PAGE2);
    const paginationDiv = parentEl.createEl("div", { cls: "dn-modal-sticky-pagination" });
    if (totalPages > 0) {
      const btnReload = paginationDiv.createEl("button", { cls: "dn-btn-next", text: "Reload", title: "Reload content" });
      btnReload.addEventListener("click", () => {
        this.reloadContent();
      });
      paginationDiv.createEl("span", {
        text: `Page ${this._currentPage} of ${totalPages}`,
        cls: "pagination-status"
      });
      const btnPrev = paginationDiv.createEl("button", { cls: "dn-btn-prev", text: "\u25C0", title: "Previous" });
      btnPrev.disabled = this._currentPage === 1;
      btnPrev.addEventListener("click", () => {
        this._currentPage -= 1;
        this.renderContent();
      });
      const btnNext = paginationDiv.createEl("button", { cls: "dn-btn-next", text: "\u25B6", title: "Next" });
      btnNext.disabled = this._currentPage === totalPages;
      btnNext.addEventListener("click", () => {
        this._currentPage += 1;
        this.renderContent();
      });
    }
  }
};

// src/dn.ts
var DNModal = class extends import_obsidian7.Modal {
  constructor(app, plugin, _dataManager) {
    super(app);
    this._dataManager = _dataManager;
    this._recent_files_tags = [];
    this._sort_order = "desc";
    this._sort_column = "modified";
    this._selected_category = "";
    this._TABLE_LAYOUTS = ["dn-tbl-default", "dn-tbl-row", "dn-tbl-column", "dn-tbl-bordered", "dn-tbl-cards"];
    this.selected_table_layout = "dn-tbl-default";
    this.selected_sort_value = "modified-desc";
    this.current_page = 1;
    this.num_recent_files = 5;
    this.num_bookmarked_files = 10;
    this.files_per_page = 20;
    this.date_format = "YYYY-MM-DD HH:mm";
    this.default_view = 1;
    this.excluded_extensions = [];
    this.excluded_folders = [];
    // File colors
    this.color_notes = "#bf48ff";
    this.color_images = "#007fff";
    this.color_canvas = "#ff7f28";
    this.color_videos = "#d34848";
    this.color_audios = "#bfbf00";
    this.color_pdf = "#00a300";
    this.color_other = "#828282";
    this.color_bases = "#00a3a3";
    this.colored_files = false;
    // Hide columns
    this.hide_columns = [];
    this.image_thumbnail = false;
    this.show_dashboard_piechart = true;
    this.onclose_search = "";
    this._previewComponent = new import_obsidian7.Component();
    this.tags_sidebar_sorted_by_frequency = false;
    this.tagsCurrentPage = 0;
    this.filteredPrimaryTagNotes = [];
    this.tags_sidebar = true;
    this.primary_tags_results_visible = true;
    this.dnHandleIntersection = (entries) => {
      entries.forEach((entry) => {
        if (!entry.isIntersecting) {
          entry.target.removeEventListener("contextmenu", this.dnHandleClick);
          entry.target.removeEventListener("click", this.dnHandleClick);
          entry.target.removeEventListener("dblclick", this.dnHandleDblClick);
        }
      });
    };
    this.plugin = plugin;
    this.intersectionObserver = new IntersectionObserver(this.dnHandleIntersection);
  }
  async onOpen() {
    var _a;
    const { contentEl } = this;
    this._data = await this._dataManager.getDataCache(
      this.app,
      this.excluded_extensions,
      this.excluded_folders
    );
    this._previewComponent.load();
    this._hoverDiv = this.contentEl.createEl("div", { cls: "dn-preview" });
    this._hoverDiv.addEventListener("click", (evt) => {
      evt.stopPropagation();
      evt.stopImmediatePropagation();
    });
    await this.updateModalData();
    this._bookmarks = await this._dataManager.getBookmarkedVaultFiles(this.app, this.excluded_extensions, this.excluded_folders);
    this._last_opened = this._dataManager.getLastOpenedFiles(this.app);
    const leaf = (_a = this.app.workspace) == null ? void 0 : _a.getMostRecentLeaf();
    if (leaf !== null) {
      this._leaf = leaf;
    }
    await this.dnCreateMainUI(contentEl);
    this.dnSetView(this.default_view);
    this.dnSetSelectLayoutValue(this.selected_table_layout);
    this.dnSetSelectSortValue(this.selected_sort_value);
    this.dnToggleColoredFiles();
    this._isDraggingPreview = false;
    this._hoverDivLeft = "";
    this._hoverDivTop = "";
    await this.dnLoadSearchOnClose();
    if (this.INPUT_SEARCH.value !== "") {
      this.dnModalSearchVault(this.INPUT_SEARCH.value);
    }
  }
  async updateModalData() {
    this._files = this._data.all_files;
    this._folders = this._data.folders;
    this._notes = this._data.notes;
    this._images = this._data.images;
    this._canvas = this._data.canvas;
    this._audios = this._data.audios;
    this._videos = this._data.videos;
    this._bases = this._data.bases;
    this._pdf = this._data.pdf;
    this._other = this._data.other;
    this._files_excluded_filters = this._data.filtered_files;
    this._files_results = this._files_excluded_filters;
    this._recent = await this.dnGetRecentFiles(this._files_excluded_filters, this.num_recent_files);
    this._recent_files_tags = await this.dnGetRecentFiles(this._notes, 10);
  }
  async dnCreateMainUI(el) {
    const mainContainer = el.createEl("div", { cls: "dn-container" });
    mainContainer.setAttribute("id", "dn-container");
    this.dnCreateInputSearch(mainContainer);
    const topNav = mainContainer.createEl("div", { cls: "dn-top-nav" });
    const leftTopNav = topNav.createEl("div");
    const rightTopNav = topNav.createEl("div");
    this._BTN_DASHBOARD = leftTopNav.createEl("button", { text: "Dashboard", cls: "mod-cta" });
    this._BTN_DASHBOARD.setAttribute("aria-label", "Dashboard view");
    this._BTN_DASHBOARD.setAttribute("data-tooltip-position", "bottom");
    this._BTN_DASHBOARD.onClickEvent((evt) => {
      this.dnSetView(1);
    });
    this._BTN_NAVIGATOR = leftTopNav.createEl("button", { text: "Navigator" });
    this._BTN_NAVIGATOR.setAttribute("aria-label", "Navigator view");
    this._BTN_NAVIGATOR.setAttribute("data-tooltip-position", "bottom");
    this._BTN_NAVIGATOR.onClickEvent((evt) => {
      this.dnModalSearchVault(this.INPUT_SEARCH.value);
      this.dnSetView(2);
    });
    this._BTN_TAGS = leftTopNav.createEl("button", { text: "Tags" });
    this._BTN_TAGS.setAttribute("aria-label", "Tags dashboard view");
    this._BTN_TAGS.setAttribute("data-tooltip-position", "bottom");
    this._BTN_TAGS.onClickEvent((evt) => {
      this.dnSetView(3);
    });
    this._BTN_TAGS.setAttribute("id", "btn-tags");
    this.labelLayout = rightTopNav.createEl("span", {
      text: "Layout:",
      cls: "dn-tbl-label"
    });
    this.labelLayout.setAttribute("id", "dn-label-layout");
    this._SELECT_TABLE_LAYOUT = rightTopNav.createEl("select", {
      cls: "dropdown tbl-select"
    });
    this._SELECT_TABLE_LAYOUT.createEl("option", { text: "Default", value: "dn-tbl-default" });
    this._SELECT_TABLE_LAYOUT.createEl("option", { text: "Row striped", value: "dn-tbl-row" });
    this._SELECT_TABLE_LAYOUT.createEl("option", { text: "Column striped", value: "dn-tbl-column" });
    this._SELECT_TABLE_LAYOUT.createEl("option", { text: "Bordered", value: "dn-tbl-bordered" });
    this._SELECT_TABLE_LAYOUT.createEl("option", { text: "Cards", value: "dn-tbl-cards" });
    this._SELECT_TABLE_LAYOUT.addEventListener("change", () => {
      this.dnSelectTableLayout();
    });
    this.labelSort = rightTopNav.createEl("span", {
      text: "Sort by:",
      cls: "dn-tbl-label"
    });
    this.labelSort.setAttribute("id", "dn-label-sort");
    this._SELECT_SORT = rightTopNav.createEl("select", {
      cls: "dropdown"
    });
    this._SELECT_SORT.setAttribute("id", "dn-select-sort");
    this._SELECT_SORT.addEventListener("change", () => {
      this.dnSortColumnWithSelect();
    });
    this._SELECT_SORT.createEl("option", { text: "Name (A to Z)", value: "name-asc" });
    this._SELECT_SORT.createEl("option", { text: "Name (Z to A)", value: "name-desc" });
    this._SELECT_SORT.createEl("option", { text: "Extension (A to Z)", value: "ext-asc" });
    this._SELECT_SORT.createEl("option", { text: "Extension (Z to A)", value: "ext-desc" });
    this._SELECT_SORT.createEl("option", { text: "Path (A to Z)", value: "path-asc" });
    this._SELECT_SORT.createEl("option", { text: "Path (Z to A)", value: "path-desc" });
    this._SELECT_SORT.createEl("option", { text: "Size (smallest to largest)", value: "size-asc" });
    this._SELECT_SORT.createEl("option", { text: "Size (largest to smallest)", value: "size-desc" });
    this._SELECT_SORT.createEl("option", { text: "Date/time (oldest to newest)", value: "modified-asc" });
    this._SELECT_SORT.createEl("option", { text: "Date/time (newest to oldest)", value: "modified-desc" });
    this._SELECT_SORT.createEl("option", { text: "Backlinks (lowest to highest)", value: "backlinks-asc" });
    this._SELECT_SORT.createEl("option", { text: "Backlinks (highest to lowest)", value: "backlinks-desc" });
    this._SELECT_SORT.createEl("option", { text: "Outgoing links (lowest to highest)", value: "outgoing-asc" });
    this._SELECT_SORT.createEl("option", { text: "Outgoing links (highest to lowest)", value: "outgoing-desc" });
    this._VIEW_DASHBOARD = mainContainer.createEl("div", { cls: "dn-flex" });
    this._VIEW_NAVIGATOR = mainContainer.createEl("div", { cls: "dn-display-none" });
    this._VIEW_TAGS = mainContainer.createEl("div", { cls: "dn-display-none" });
    this._divSearchResults = this._VIEW_NAVIGATOR.createEl("div", { cls: "dn-div-table" });
    await this.dnShowModalSearchResults({ f: this._files_results, el: this._divSearchResults, leaf: this._leaf });
    const divVaultStats = this._VIEW_DASHBOARD.createEl("div");
    divVaultStats.setAttribute("id", "dn-vault-stats");
    if (this.show_dashboard_piechart) {
      const divVaultGraph = this._VIEW_DASHBOARD.createEl("div");
      divVaultGraph.setAttribute("id", "dn-vault-graph");
      const canvasPieChart1 = divVaultGraph.createEl("canvas");
      canvasPieChart1.setAttribute("id", "dashboard-canvas");
      const styles = getComputedStyle(document.body);
      const labelColor = styles.getPropertyValue("--text-muted");
      const pieChart1 = new DNPieChart(canvasPieChart1, 10, 12, 50, labelColor);
      pieChart1.addData(this._notes.length, this.color_notes, "Notes");
      pieChart1.addData(this._images.length, this.color_images, "Images");
      pieChart1.addData(this._bases.length, this.color_bases, "Bases");
      pieChart1.addData(this._canvas.length, this.color_canvas, "Canvases");
      pieChart1.addData(this._videos.length, this.color_videos, "Videos");
      pieChart1.addData(this._audios.length, this.color_audios, "Audio files");
      pieChart1.addData(this._pdf.length, this.color_pdf, "PDFs");
      pieChart1.addData(this._other.length, this.color_other, "Other files");
      pieChart1.draw();
      const divStatsFrame = divVaultGraph.createEl("div", { cls: "dn-stats-files-folders" });
      divStatsFrame.createEl("div", { cls: "dn-stats-files", text: "Files: " + this._files_excluded_filters.length });
      divStatsFrame.createEl("div", { cls: "dn-stats-folders", text: "Folders: " + this._folders.length });
    }
    const divBookmarkedFiles = this._VIEW_DASHBOARD.createEl("div");
    divBookmarkedFiles.setAttribute("id", "dn-bookmarked-files");
    const divLastOpenedFiles = this._VIEW_DASHBOARD.createEl("div");
    divLastOpenedFiles.setAttribute("id", "dn-last-opened-files");
    const divRecentFiles = this._VIEW_DASHBOARD.createEl("div");
    divRecentFiles.setAttribute("id", "dn-recent-files");
    const divRecentNotes = this._VIEW_DASHBOARD.createEl("div");
    divRecentNotes.setAttribute("id", "dn-recent-notes");
    const divBases = this._VIEW_DASHBOARD.createEl("div");
    divBases.setAttribute("id", "dn-bases");
    const divCanvas = this._VIEW_DASHBOARD.createEl("div");
    divCanvas.setAttribute("id", "dn-canvas");
    const divImages = this._VIEW_DASHBOARD.createEl("div");
    divImages.setAttribute("id", "dn-images");
    const divAudios = this._VIEW_DASHBOARD.createEl("div");
    divAudios.setAttribute("id", "dn-audios");
    const divVideos = this._VIEW_DASHBOARD.createEl("div");
    divVideos.setAttribute("id", "dn-videos");
    const divPDFs = this._VIEW_DASHBOARD.createEl("div");
    divPDFs.setAttribute("id", "dn-pdfs");
    const divOther = this._VIEW_DASHBOARD.createEl("div");
    divOther.setAttribute("id", "dn-other");
    await this.dnCreateBtn(
      divVaultStats,
      "dn-btn-notes",
      "Notes",
      this._notes,
      this._divSearchResults,
      this._leaf
    );
    await this.dnCreateBtn(
      divVaultStats,
      "dn-btn-canvas",
      "Canvases",
      this._canvas,
      this._divSearchResults,
      this._leaf
    );
    await this.dnCreateBtn(
      divVaultStats,
      "dn-btn-bases",
      "Bases",
      this._bases,
      this._divSearchResults,
      this._leaf
    );
    await this.dnCreateBtn(
      divVaultStats,
      "dn-btn-images",
      "Images",
      this._images,
      this._divSearchResults,
      this._leaf
    );
    await this.dnCreateBtn(
      divVaultStats,
      "dn-btn-audios",
      "Audio files",
      this._audios,
      this._divSearchResults,
      this._leaf
    );
    await this.dnCreateBtn(
      divVaultStats,
      "dn-btn-videos",
      "Videos",
      this._videos,
      this._divSearchResults,
      this._leaf
    );
    await this.dnCreateBtn(
      divVaultStats,
      "dn-btn-pdf",
      "PDFs",
      this._pdf,
      this._divSearchResults,
      this._leaf
    );
    await this.dnCreateBtn(
      divVaultStats,
      "dn-btn-other",
      "Other files",
      this._other,
      this._divSearchResults,
      this._leaf
    );
    await this.dnCreateRecentFiles("Bookmarks", divBookmarkedFiles, this._bookmarks, this.num_bookmarked_files);
    await this.dnCreateRecentFiles("Recently opened", divLastOpenedFiles, this._last_opened, this.num_recent_files);
    await this.dnCreateRecentFiles("Recent files", divRecentFiles, this._recent, this.num_recent_files);
    await this.dnCreateRecentFiles("Recent notes", divRecentNotes, this._notes, this.num_recent_files);
    await this.dnCreateRecentFiles("Recent bases", divBases, this._bases, this.num_recent_files);
    await this.dnCreateRecentFiles("Recent canvases", divCanvas, this._canvas, this.num_recent_files);
    await this.dnCreateRecentFiles("Recent images", divImages, this._images, this.num_recent_files);
    await this.dnCreateRecentFiles("Recent audio files", divAudios, this._audios, this.num_recent_files);
    await this.dnCreateRecentFiles("Recent videos", divVideos, this._videos, this.num_recent_files);
    await this.dnCreateRecentFiles("Recent PDFs", divPDFs, this._pdf, this.num_recent_files);
    await this.dnCreateRecentFiles("Recent other files", divOther, this._other, this.num_recent_files);
    const tagsMainSearchContainer = this._VIEW_TAGS.createEl("div", { cls: "dn-td-main-search-container" });
    const tagsSearchLeftDiv = tagsMainSearchContainer.createEl("div", { cls: "dn-search-input-container-left-div" });
    this.TAGS_INPUT_SEARCH = tagsSearchLeftDiv.createEl("input", {
      type: "search",
      placeholder: "Search for tag(s)...",
      cls: "dn-td-tag-search-input"
    });
    this.TAGS_INPUT_SEARCH.spellcheck = false;
    this.BTN_CLEAR_TAGS_INPUT_SEARCH = tagsSearchLeftDiv.createEl("div", { cls: "search-input-clear-button" });
    this.BTN_CLEAR_TAGS_INPUT_SEARCH.setAttribute("aria-label", "Clear search");
    this.BTN_CLEAR_TAGS_INPUT_SEARCH.onClickEvent((evt) => {
      this.clearTagsSearchField();
    });
    const tagsSearchRightDiv = tagsMainSearchContainer.createEl("div", { cls: "dn-search-input-container-right-div" });
    const btnSearchInNavigator = tagsSearchRightDiv.createEl("button", { cls: "dn-top-btns-search" });
    btnSearchInNavigator.setAttribute("id", "dn-tags-btn-search-navigator");
    btnSearchInNavigator.setAttribute("aria-label", "Search in Navigator");
    btnSearchInNavigator.setAttribute("data-tooltip-position", "bottom");
    btnSearchInNavigator.onClickEvent((evt) => {
      if (this.TAGS_INPUT_SEARCH.value) {
        this.INPUT_SEARCH.value = this.TAGS_INPUT_SEARCH.value;
        const inputEvent = new Event("input", { bubbles: true });
        this.INPUT_SEARCH.dispatchEvent(inputEvent);
      } else {
        new import_obsidian7.Notice("Please type a tag or multiple tags to search in Navigator.");
      }
    });
    const btnTagsSidebar = tagsSearchRightDiv.createEl("button", { cls: "dn-top-btns-search" });
    btnTagsSidebar.setAttribute("id", "dn-tags-btn-sidebar");
    btnTagsSidebar.setAttribute("aria-label", "Toggle tags sidebar");
    btnTagsSidebar.setAttribute("data-tooltip-position", "bottom");
    btnTagsSidebar.onClickEvent((evt) => {
      this.tags_sidebar = !this.tags_sidebar;
      this.TAGS_SIDEBAR_EL.classList.toggle("dn-hidden", !this.tags_sidebar);
    });
    this.TAGS_FIRST_COL_EL = this._VIEW_TAGS.createEl("div", { cls: "dn-td-first-col" });
    this.TAGS_RECENT_FILES_EL = this.TAGS_FIRST_COL_EL.createEl("div", { cls: "dn-td-recent-notes-div" });
    this.TAGS_RESULTS_EL = this.TAGS_FIRST_COL_EL.createEl("div", { cls: "dn-td-primary-tags-div" });
    this.TAGS_SIDEBAR_EL = this._VIEW_TAGS.createEl("div", { cls: "dn-td-second-col" });
    if (this.tags_sidebar) {
      this.TAGS_SIDEBAR_EL.classList.remove("dn-hidden");
    } else {
      this.TAGS_SIDEBAR_EL.classList.add("dn-hidden");
    }
    this.TAGS_RECENT_FILES_EL.createEl("h3", { text: "Recent notes & tags", cls: "dn-subtitles" });
    if (this._recent_files_tags) {
      this._recent_files_tags.forEach((file) => {
        const tagsRecentNoteItem = this.TAGS_RECENT_FILES_EL.createEl("div", { cls: "dn-td-recent-note-item" });
        const tdRecentNoteLink = tagsRecentNoteItem.createEl("a", { text: file.basename, title: file.path, cls: "dn-f-note" });
        tdRecentNoteLink.onClickEvent((evt) => {
          if (file !== null) {
            this.dnOpenFileAlt(file, evt);
          }
        });
        tdRecentNoteLink.addEventListener("mouseover", (evt) => this.dnHandleHoverPreview(evt, file));
        const tags_per_recent_file = getTagsPerFile(file);
        tagsRecentNoteItem.createEl("br");
        if (tags_per_recent_file !== "") {
          const tdFileTags = tags_per_recent_file.split(" ");
          tdFileTags.forEach((tag) => {
            tagsRecentNoteItem.createEl("a", { cls: "tag", text: tag, href: tag }).onClickEvent((evt) => {
              this.handleTagActionsTagsDashboard(evt, tag);
            });
          });
        } else {
          tagsRecentNoteItem.createEl("span", { text: "No tags" });
        }
      });
    }
    this.generateTagsSidebar(this.TAGS_SIDEBAR_EL, this._data.tags);
    this.TAGS_INPUT_SEARCH.addEventListener("input", (0, import_obsidian7.debounce)(() => this.dnTDSearchTags(this.TAGS_INPUT_SEARCH.value), 300, true));
    this._dnTagSuggestions = new DNTagSuggestions(this.app, this.TAGS_INPUT_SEARCH, this._data.tagNames);
    this._dnMainSearchTagSuggestions = new DNTagSuggestions(this.app, this.INPUT_SEARCH, this._data.tagNames);
  }
  async dnCreateBtn(elDiv, btnId, btnTitle, btnCategoryFiles, displayEl, leaf) {
    const btn = elDiv.createEl("div", { cls: "dn-btn-stats" });
    btn.setAttribute("id", btnId);
    btn.createEl("span", { cls: "dn-btn-stats-label", text: btnTitle });
    btn.createEl("span", { cls: "dn-btn-stats-icon" });
    btn.createEl("span", { cls: "dn-btn-stats-number", text: btnCategoryFiles.length.toString() });
    btn.onClickEvent((evt) => {
      this._files_results = btnCategoryFiles;
      this.INPUT_SEARCH.value = "@" + btnTitle.replace(" files", "").toLocaleLowerCase() + " ";
      this.dnModalSearchVault(this.INPUT_SEARCH.value);
      this.INPUT_SEARCH.focus();
    });
    return btn;
  }
  dnCreateInputSearch(el) {
    this.SEARCH_INPUT_CONTAINER = el.createEl("div", { cls: "dn-search-input-container" });
    const searchLeftDiv = this.SEARCH_INPUT_CONTAINER.createEl("div", { cls: "dn-search-input-container-left-div" });
    this.INPUT_SEARCH = searchLeftDiv.createEl("input", { type: "search", placeholder: "Search..." });
    this.INPUT_SEARCH.setAttribute("id", "dn-input-filter");
    this.INPUT_SEARCH.spellcheck = false;
    this.INPUT_SEARCH.focus();
    this.BTN_CLEAR_INPUT_SEARCH = searchLeftDiv.createEl("div", { cls: "search-input-clear-button" });
    this.BTN_CLEAR_INPUT_SEARCH.setAttribute("aria-label", "Clear search");
    this.BTN_CLEAR_INPUT_SEARCH.onClickEvent((evt) => {
      this.clearSearchField();
    });
    const searchRightDiv = this.SEARCH_INPUT_CONTAINER.createEl("div", { cls: "dn-search-input-container-right-div" });
    const topBtnAddSearch = searchRightDiv.createEl("button", { cls: "dn-top-btns-search" });
    topBtnAddSearch.setAttribute("id", "dn-top-btn-add");
    topBtnAddSearch.setAttribute("aria-label", "Save search");
    topBtnAddSearch.setAttribute("data-tooltip-position", "bottom");
    topBtnAddSearch.onClickEvent((evt) => {
      this.plugin.DN_SAVE_SEARCH_MODAL.open();
    });
    const topBtnSaved = searchRightDiv.createEl("button", { cls: "dn-top-btns-search" });
    topBtnSaved.setAttribute("id", "dn-top-btn-saved");
    topBtnSaved.setAttribute("aria-label", "Saved searches");
    topBtnSaved.setAttribute("data-tooltip-position", "bottom");
    topBtnSaved.onClickEvent((evt) => {
      this.plugin.DN_SAVED_SEARCHES_MODAL.open();
    });
    const topBtnQuickDisplayOptions = searchRightDiv.createEl("button", { cls: "dn-top-btns-search" });
    topBtnQuickDisplayOptions.setAttribute("id", "dn-top-btn-table-columns");
    topBtnQuickDisplayOptions.setAttribute("aria-label", "Quick display options");
    topBtnQuickDisplayOptions.setAttribute("data-tooltip-position", "bottom");
    topBtnQuickDisplayOptions.onClickEvent((evt) => {
      this.plugin.DN_QUICK_DISPLAY_OPTIONS_MODAL.open();
    });
    const topBtnInfo = searchRightDiv.createEl("button", { cls: "dn-top-btns-search" });
    topBtnInfo.setAttribute("id", "dn-top-btn-info");
    topBtnInfo.setAttribute("aria-label", "Quick reference/help");
    topBtnInfo.setAttribute("data-tooltip-position", "bottom");
    topBtnInfo.onClickEvent((evt) => {
      this.plugin.DN_INFO_MODAL.open();
    });
    this.INPUT_SEARCH.addEventListener("input", (0, import_obsidian7.debounce)(() => this.dnModalSearchVault(this.INPUT_SEARCH.value), 300, true));
  }
  clearSearchField() {
    this.INPUT_SEARCH.value = "";
    this.BTN_CLEAR_INPUT_SEARCH.style.display = "none";
    this.INPUT_SEARCH.focus();
    this.dnModalSearchVault(this.INPUT_SEARCH.value);
  }
  clearTagsSearchField() {
    this.TAGS_INPUT_SEARCH.value = "";
    this.BTN_CLEAR_TAGS_INPUT_SEARCH.style.display = "none";
    this.TAGS_INPUT_SEARCH.focus();
    this.modalEl.scrollTo({ top: 0, behavior: "smooth" });
    this.TAGS_SIDEBAR_EL.scrollTo({ top: 0, behavior: "smooth" });
    this.dnTDSearchTags(this.TAGS_INPUT_SEARCH.value);
  }
  async dnModalSearchVault(val) {
    this.dnSetView(2);
    if (val === "") {
      this.BTN_CLEAR_INPUT_SEARCH.style.display = "none";
    } else {
      this.BTN_CLEAR_INPUT_SEARCH.style.display = "flex";
    }
    const search_raw_vals = /!(?:"(?:\\"|[^"])*"|'(?:\\'|[^'])*')|"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|\S+/g;
    let searchParams = val.toLowerCase().trim().match(search_raw_vals);
    if (!searchParams) {
      return this.searchAction("", this._files_excluded_filters);
    }
    searchParams = searchParams.map((param) => {
      if (param.startsWith('"') && param.endsWith('"')) {
        return param.slice(1, -1);
      } else if (param.startsWith("'") && param.endsWith("'")) {
        return param.slice(1, -1);
      } else if (param.startsWith(".")) {
        return "\\" + param + "$";
      } else if (param.startsWith("/") && param.length === 1) {
        return "^/$";
      } else {
        return param;
      }
    });
    const firstParam = searchParams[0];
    await this.searchAction(firstParam, this._files_excluded_filters);
    const remainingParams = searchParams.slice(1);
    remainingParams.every(async (p) => {
      await this.searchAction(p, this._files_results);
    });
  }
  // Search
  async searchAction(val, files) {
    let rExp;
    const isExcludeSearch = val.startsWith("!") && val.length >= 1;
    let excludeParam = isExcludeSearch ? val.slice(1) : val;
    if (excludeParam.startsWith('"') && excludeParam.endsWith('"')) {
      excludeParam = excludeParam.slice(1, -1);
    } else if (excludeParam.startsWith("'") && excludeParam.endsWith("'")) {
      excludeParam = excludeParam.slice(1, -1);
    }
    try {
      if (isExcludeSearch) {
        rExp = new RegExp("", "iu");
      } else {
        if (val === "!") {
          rExp = new RegExp("", "iu");
        } else {
          rExp = new RegExp(val.toLowerCase(), "iu");
        }
      }
    } catch (error) {
      return;
    }
    const isDateSearch = val.startsWith("@");
    if (this.INPUT_SEARCH.value.includes("@")) {
      this.INPUT_SEARCH.classList.add("dn-input-datesearch");
    } else {
      this.INPUT_SEARCH.classList.remove("dn-input-datesearch");
    }
    if (isExcludeSearch) {
      let isMatch;
      if (excludeParam === "/") {
        this._files_results = files.filter((file) => {
          isMatch = getFolderStructure(file.path).toLowerCase() === "/";
          return isExcludeSearch ? !isMatch : isMatch;
        });
      } else {
        this._files_results = files.filter((file) => {
          isMatch = file.name.toLowerCase().includes(excludeParam) || getFolderStructure(file.path).toLowerCase().includes(excludeParam) || (0, import_obsidian8.moment)(file.stat.mtime).format(this.date_format).toLowerCase().includes(excludeParam) || getTagsPerFile(file).toLowerCase().includes(excludeParam) || getPropsPerFile(file).toLowerCase().includes(excludeParam);
          return isExcludeSearch ? !isMatch : isMatch;
        });
      }
    } else {
      this._files_results = files.filter(
        (file) => {
          if (isDateSearch) {
            const dateSearch = val.slice(1).toLowerCase().split(" ");
            return this.dnHandleSpecialSearch(dateSearch[0], file);
          } else {
            return this.dnHandleNormalSearch(rExp, file);
          }
        }
      );
    }
    this.dnSortFilteredFiles(false);
    await this.dnShowModalSearchResults({ f: this._files_results, el: this._divSearchResults, leaf: this._leaf });
    const tbody = document.getElementById("dn-table-results");
    if (tbody !== null) {
      const tr = tbody.getElementsByTagName("tr");
      for (let i = 0, len = tr.length; i < len; i++) {
        const allTds = tr[i].querySelectorAll("td");
        let isResult = false;
        for (let j = 0; j < allTds.length; j++) {
          const td = allTds[j];
          const tdVal = td.innerText.toLowerCase();
          if (rExp.test(tdVal) || isDateSearch) {
            isResult = true;
            break;
          }
        }
        if (isResult) {
          tr[i].classList.remove("dn-display-none");
        } else {
          tr[i].classList.add("dn-display-none");
        }
      }
    }
  }
  async dnShowModalSearchResults({ f, el, leaf, currentPage = 1 }) {
    el.empty();
    const paginationContainer = this._divSearchResults.createEl("div", { cls: "dn-pagination" });
    const table = el.createEl("table", { cls: this.selected_table_layout });
    table.setAttribute("id", "dn-table");
    const thead = table.createEl("thead");
    const tr = thead.createEl("tr");
    thead.addEventListener("contextmenu", (evt) => {
      const clickedHeader = evt.target.closest("th");
      if (clickedHeader) {
        evt.preventDefault();
        evt.stopPropagation();
        this.plugin.DN_QUICK_DISPLAY_OPTIONS_MODAL.open();
      }
    });
    this._thThumb = tr.createEl("th", { text: "\u25A0", cls: "dn-th-thumbnail" });
    this._th1 = tr.createEl("th", { text: "Name", cls: "dn-th-name" });
    this._th2 = tr.createEl("th", { text: "Ext", cls: "dn-th-ext" });
    this._th3 = tr.createEl("th", { text: "Path", cls: "dn-th-path" });
    this._th4 = tr.createEl("th", { text: "Size", cls: "dn-th-size" });
    this._th5 = tr.createEl("th", { text: "Date", cls: "dn-th-date" });
    this._th6 = tr.createEl("th", { text: "Tags", cls: "dn-th-tags" });
    this._th7 = tr.createEl("th", { text: "Frontmatter", cls: "dn-th-frontmatter" });
    this._th_bl = tr.createEl("th", { text: "BL", cls: "dn-th-backlinks" });
    this._th_ol = tr.createEl("th", { text: "OL", cls: "dn-th-outgoing-links" });
    this._th1.addEventListener("dblclick", () => this.dnAlternateSortColumn("name"));
    this._th2.addEventListener("dblclick", () => this.dnAlternateSortColumn("ext"));
    this._th3.addEventListener("dblclick", () => this.dnAlternateSortColumn("path"));
    this._th4.addEventListener("dblclick", () => this.dnAlternateSortColumn("size"));
    this._th5.addEventListener("dblclick", () => this.dnAlternateSortColumn("modified"));
    this._th_bl.addEventListener("dblclick", () => this.dnAlternateSortColumn("backlinks"));
    this._th_ol.addEventListener("dblclick", () => this.dnAlternateSortColumn("outgoing"));
    const tbody = table.createEl("tbody");
    tbody.setAttribute("id", "dn-table-results");
    if (f.length > 0) {
      if (this.intersectionObserver) {
        this.intersectionObserver.disconnect();
      }
      this._total_pages = Math.ceil(f.length / this.files_per_page);
      const paginatedData = f.slice((currentPage - 1) * this.files_per_page, currentPage * this.files_per_page);
      for (const file of paginatedData) {
        const tr2 = tbody.createEl("tr");
        tr2.addEventListener("contextmenu", (evt) => {
          this.dnHandleClick(evt, file);
        });
        tr2.addEventListener("click", (evt) => {
          this.dnHandleClick(evt, file);
        });
        tr2.addEventListener("dblclick", (evt) => {
          this.dnHandleDblClick(evt, file);
        });
        tr2.addEventListener("mouseover", async (evt) => {
          this.dnHandleHoverPreview(evt, file);
        });
        this.intersectionObserver.observe(tr2);
        tr2.removeEventListener("mouseover", async (evt) => {
          this.dnHandleHoverPreview(evt, file);
        });
        const tdThumbnail = tr2.createEl("td", { title: file.path });
        this.setThumbnail(tdThumbnail, file);
        tdThumbnail.onClickEvent((evt) => {
          if (leaf !== null && file !== null) {
            this.dnOpenFileAlt(file, evt);
          }
        });
        const td1 = tr2.createEl("td", { cls: "dn-td-name" });
        td1.createEl("a", { cls: this.dnSetFileIconClass(file.extension), text: file.name }).onClickEvent((evt) => {
          if (leaf !== null && file !== null) {
            this.dnOpenFileAlt(file, evt);
          }
        });
        const fExt = file.extension;
        const fSize = formatFileSize(file.stat.size);
        const fMTime = (0, import_obsidian8.moment)(file.stat.mtime).format(this.date_format);
        const fCTime = (0, import_obsidian8.moment)(file.stat.ctime).format(this.date_format);
        const td2 = tr2.createEl("td", { cls: "dn-td-ext" });
        td2.createEl("a", { cls: "dn-ext", text: fExt, title: fExt }).onClickEvent((evt) => {
          if (evt.button === 2) {
            evt.preventDefault();
          } else {
            this.INPUT_SEARCH.value = "." + fExt;
            this.dnModalSearchVault(this.INPUT_SEARCH.value);
          }
        });
        const td3 = tr2.createEl("td", { cls: "dn-td-path" });
        const folder_path = getFolderStructure(file.path);
        td3.createEl("a", { cls: "dn-folder-path", text: folder_path, title: file.path }).onClickEvent((evt) => {
          if (evt.button === 2) {
            evt.preventDefault();
          } else {
            this.INPUT_SEARCH.value = folder_path;
            this.dnModalSearchVault(this.INPUT_SEARCH.value + "$");
          }
        });
        tr2.createEl("td", { text: fSize, title: fSize + " bytes", cls: "dn-td-size" });
        tr2.createEl("td", { text: fMTime, title: fCTime + " - Created\n" + fMTime + " - Modified", cls: "dn-td-date" });
        const tags_per_file = getTagsPerFile(file);
        const props_per_file = getPropsPerFile(file);
        const td6 = tr2.createEl("td", { title: tags_per_file, cls: "dn-td-tags" });
        if (tags_per_file !== "") {
          const fTags = tags_per_file.split(" ");
          fTags.forEach((tag) => {
            td6.createEl("a", { cls: "tag", text: tag, href: tag }).onClickEvent((evt) => {
              this.handleTagActions(evt, tag);
            });
          });
        }
        const td7 = tr2.createEl("td", { cls: "dn-td-frontmatter" });
        if (props_per_file !== "") {
          const fProps = props_per_file.split("\n");
          fProps.forEach((prop) => {
            td7.createEl("a", { cls: "dn-tag", text: prop, title: props_per_file }).onClickEvent((evt) => {
              if (evt.button === 2) {
                evt.preventDefault();
              } else {
                this.INPUT_SEARCH.value = prop;
                this.dnModalSearchVault(this.INPUT_SEARCH.value);
              }
            });
          });
        }
        const backlinks = getBacklinksToFile(file);
        const num_of_backlinks = backlinks.length.toString();
        tr2.createEl("td", { text: num_of_backlinks, cls: "dn-td-backlinks" });
        const outgoing_links = getOutgoingLinks(file);
        const num_of_outgoing_links = outgoing_links.length.toString();
        tr2.createEl("td", { text: num_of_outgoing_links, cls: "dn-td-outgoing-links" });
      }
      paginationContainer.empty();
      paginationContainer.createEl("div", { cls: "dn-pagination-total-results", text: `File(s): ${f.length} ` });
      const rightPagDiv = paginationContainer.createEl("div", { cls: "dn-pagination-current-page", text: `Page ${currentPage} of ${this._total_pages} ` });
      const btnPrev = rightPagDiv.createEl("button", { cls: "dn-btn-prev", text: "\u25C0", title: "Previous" });
      if (currentPage === 1) {
        btnPrev.disabled = true;
      } else {
        btnPrev.disabled = false;
      }
      btnPrev.addEventListener("click", async () => {
        if (currentPage > 1) {
          await this.dnShowModalSearchResults({ f, el, leaf, currentPage: currentPage - 1 });
        }
      });
      const btnNext = rightPagDiv.createEl("button", { cls: "dn-btn-next", text: "\u25B6", title: "Next" });
      if (currentPage === this._total_pages) {
        btnNext.disabled = true;
      } else {
        btnNext.disabled = false;
      }
      btnNext.addEventListener("click", async () => {
        if (currentPage < this._total_pages) {
          await this.dnShowModalSearchResults({ f, el, leaf, currentPage: currentPage + 1 });
        }
      });
      this.dnUpdateSortIndicators(
        this._sort_column,
        this._sort_order,
        this._th1,
        this._th2,
        this._th3,
        this._th4,
        this._th5,
        this._th_bl,
        this._th_ol
      );
      const dnTableManager = new DNTableManager("#dn-table");
      dnTableManager.hideColumns(this.hide_columns);
    } else {
      tr.empty();
      paginationContainer.createEl("div", { cls: "dn-pagination-total-results", text: `File(s): 0 ` });
      this._divSearchResults.createEl("p", { cls: "dn-no-results-found", text: "No files found." });
    }
    this.current_page = currentPage;
  }
  setThumbnail(tdThumbnail, file) {
    const file_extension = file.extension.toLowerCase();
    const extensions = {
      "md": "note",
      // Images
      "avif": "image",
      "bmp": "image",
      "gif": "image",
      "ico": "image",
      "jpeg": "image",
      "jpg": "image",
      "png": "image",
      "raw": "image",
      "svg": "image",
      "tif": "image",
      "tiff": "image",
      "webp": "image",
      // Audio files
      "aac": "audio",
      "aif": "audio",
      "aifc": "audio",
      "aiff": "audio",
      "flac": "audio",
      "m4a": "audio",
      "mp3": "audio",
      "ogg": "audio",
      "wav": "audio",
      "webm": "audio",
      // Videos
      "avi": "video",
      "mov": "video",
      "mkv": "video",
      "mp4": "video",
      // PDF and other formats
      "pdf": "pdf",
      "canvas": "canvas",
      "base": "base"
    };
    if (extensions[file_extension] === "image") {
      tdThumbnail.setAttribute("class", "dn-thumbnail-image dn-thumbnail-props");
      if (this.image_thumbnail) {
        const imgThumb = tdThumbnail.createEl("img");
        imgThumb.setAttribute("src", this.app.vault.adapter.getResourcePath((0, import_obsidian7.normalizePath)(file.path)));
        imgThumb.setAttribute("loading", "lazy");
      }
    } else if (extensions[file_extension] !== "image" && file_extension in extensions) {
      tdThumbnail.setAttribute("class", "dn-thumbnail-" + extensions[file_extension] + " dn-thumbnail-props");
    } else {
      tdThumbnail.setAttribute("class", "dn-thumbnail-other dn-thumbnail-props");
    }
  }
  async dnSortFilteredFiles(toggle) {
    switch (this._sort_column) {
      case "name":
      case "path":
      case "ext":
        this.dnSortColumnString(this._sort_column, this._sort_order, toggle);
        break;
      case "size":
      case "modified":
      case "backlinks":
      case "outgoing":
        this.dnSortColumnNumber(this._sort_column, this._sort_order, toggle);
        break;
    }
  }
  async dnSortColumnWithSelect() {
    const val = this._SELECT_SORT.value;
    if (this.dnIsValidSort(val)) {
      const selSort = val.split("-");
      this._sort_column = selSort[0];
      this._sort_order = selSort[1];
      switch (this._sort_column) {
        case "name":
        case "path":
        case "ext":
          this.dnSortColumnString(this._sort_column, this._sort_order, false);
          break;
        case "size":
        case "modified":
        case "backlinks":
        case "outgoing":
          this.dnSortColumnNumber(this._sort_column, this._sort_order, false);
          break;
      }
      await this.dnShowModalSearchResults({ f: this._files_results, el: this._divSearchResults, leaf: this._leaf });
    }
  }
  dnIsValidSort(val) {
    if ([
      "name-asc",
      "name-desc",
      "path-asc",
      "path-desc",
      "ext-asc",
      "ext-desc",
      "size-asc",
      "size-desc",
      "modified-asc",
      "modified-desc",
      "backlinks-asc",
      "backlinks-desc",
      "outgoing-asc",
      "outgoing-desc"
    ].includes(val)) {
      return true;
    } else {
      return false;
    }
  }
  dnIsValidLayout(val) {
    if (this._TABLE_LAYOUTS.includes(val)) {
      return true;
    } else {
      return false;
    }
  }
  async dnAlternateSortColumn(colName) {
    switch (colName) {
      case "name":
        this.dnSortColumnString("name", this._sort_order, true);
        break;
      case "path":
        this.dnSortColumnString("path", this._sort_order, true);
        break;
      case "ext":
        this.dnSortColumnString("ext", this._sort_order, true);
        break;
      case "size":
        this.dnSortColumnNumber("size", this._sort_order, true);
        break;
      case "modified":
        this.dnSortColumnNumber("modified", this._sort_order, true);
        break;
      case "backlinks":
        this.dnSortColumnNumber("backlinks", this._sort_order, true);
        break;
      case "outgoing":
        this.dnSortColumnNumber("outgoing", this._sort_order, true);
        break;
    }
    await this.dnShowModalSearchResults({ f: this._files_results, el: this._divSearchResults, leaf: this._leaf });
  }
  dnUpdateSortIndicators(activeColumn, sortOrder, col1, col2, col3, col4, col5, col_bl, col_ol) {
    col1.classList.remove("sort-active", "sort-asc", "sort-desc");
    col2.classList.remove("sort-active", "sort-asc", "sort-desc");
    col3.classList.remove("sort-active", "sort-asc", "sort-desc");
    col4.classList.remove("sort-active", "sort-asc", "sort-desc");
    col5.classList.remove("sort-active", "sort-asc", "sort-desc");
    col_bl.classList.remove("sort-active", "sort-asc", "sort-desc");
    col_ol.classList.remove("sort-active", "sort-asc", "sort-desc");
    let activeThCell = col5;
    switch (activeColumn) {
      case "name":
        activeThCell = col1;
        break;
      case "ext":
        activeThCell = col2;
        break;
      case "path":
        activeThCell = col3;
        break;
      case "size":
        activeThCell = col4;
        break;
      case "modified":
        activeThCell = col5;
        break;
      case "backlinks":
        activeThCell = col_bl;
        break;
      case "outgoing":
        activeThCell = col_ol;
        break;
    }
    activeThCell.classList.add("sort-active");
    activeThCell.classList.add(sortOrder === "asc" ? "sort-asc" : "sort-desc");
  }
  dnSortColumnString(sortColumn, sortOrder, toggleSortOrder) {
    const supportedColumns = ["name", "path", "ext"];
    if (!supportedColumns.includes(sortColumn)) {
      return;
    }
    if (toggleSortOrder) {
      if (this._sort_column === sortColumn) {
        sortOrder = sortOrder === "asc" ? "desc" : "asc";
      } else {
        this._sort_column = sortColumn;
        sortOrder = "desc";
      }
      this._sort_order = sortOrder;
    }
    const sortValue = sortColumn + "-" + this._sort_order;
    this.dnSetSelectSortValue(sortValue);
    this._files_results.sort((fileA, fileB) => {
      let sortA;
      let sortB;
      let folderStructureA;
      let folderStructureB;
      switch (sortColumn) {
        case "name":
          sortA = fileA.name.toLowerCase();
          sortB = fileB.name.toLowerCase();
          break;
        case "ext":
          sortA = fileA.extension.toLowerCase();
          sortB = fileB.extension.toLowerCase();
          break;
        case "path":
          folderStructureA = getFolderStructure(fileA.path);
          folderStructureB = getFolderStructure(fileB.path);
          sortA = folderStructureA.toLowerCase();
          sortB = folderStructureB.toLowerCase();
          break;
        default:
          sortA = fileA.name.toLowerCase();
          sortB = fileB.name.toLowerCase();
      }
      if (sortOrder === "asc") {
        return sortA.localeCompare(sortB);
      } else if (sortOrder === "desc") {
        return sortB.localeCompare(sortA);
      } else {
        return sortA.localeCompare(sortB);
      }
    });
  }
  dnSortColumnNumber(sortColumn, sortOrder, toggleSortOrder) {
    const supportedColumns = ["size", "modified", "backlinks", "outgoing"];
    if (!supportedColumns.includes(sortColumn)) {
      return;
    }
    if (toggleSortOrder) {
      if (this._sort_column === sortColumn) {
        sortOrder = sortOrder === "asc" ? "desc" : "asc";
      } else {
        this._sort_column = sortColumn;
        sortOrder = "desc";
      }
      this._sort_order = sortOrder;
    }
    const sortValue = sortColumn + "-" + this._sort_order;
    this.dnSetSelectSortValue(sortValue);
    this._files_results.sort((fileA, fileB) => {
      let sortA = 0;
      let sortB = 0;
      switch (sortColumn) {
        case "size":
          sortA = fileA.stat.size;
          sortB = fileB.stat.size;
          break;
        case "modified":
          sortA = fileA.stat.mtime;
          sortB = fileB.stat.mtime;
          break;
        case "backlinks":
          sortA = getBacklinksToFile(fileA).length;
          sortB = getBacklinksToFile(fileB).length;
          break;
        case "outgoing":
          sortA = getOutgoingLinks(fileA).length;
          sortB = getOutgoingLinks(fileB).length;
          break;
      }
      if (sortOrder === "asc") {
        return sortA - sortB;
      } else if (sortOrder === "desc") {
        return sortB - sortA;
      } else {
        return sortA - sortB;
      }
    });
  }
  async dnGetRecentFiles(files, num_files) {
    const arrRecentFiles = files;
    return arrRecentFiles.sort((a, b) => b.stat.mtime - a.stat.mtime).slice(0, num_files);
  }
  async dnCreateRecentFiles(title, divF, files, num_files) {
    if (files.length === 0) {
      divF.createEl("h3", { cls: "dn-subtitles", text: title });
      divF.createEl("p", { cls: "dn-no-results-found", text: "No files found." });
      divF.classList.add("dn-display-none");
    } else {
      divF.createEl("h3", { cls: "dn-subtitles", text: title });
      let sortedFiles = [];
      if (title === "Recently opened") {
        sortedFiles = files.slice(0, this.num_recent_files);
      } else if (title === "Bookmarks") {
        sortedFiles = files.slice(0, this.num_bookmarked_files);
      } else {
        sortedFiles = await this.dnGetRecentFiles(files, this.num_recent_files);
      }
      sortedFiles.forEach((sfile) => {
        const aLink = divF.createEl("a", {
          cls: this.dnSetFileIconClass(sfile.extension),
          text: sfile.basename,
          title: sfile.path
        });
        aLink.onClickEvent((evt) => {
          if (sfile !== null) {
            this.dnOpenFileAlt(sfile, evt);
          }
        });
        if (sfile.extension !== "md") {
          divF.createEl("span", { cls: "nav-file-tag", text: sfile.extension });
        }
        divF.createEl("br");
        aLink.addEventListener("mouseover", (evt) => this.dnHandleHoverPreview(evt, sfile));
      });
    }
  }
  dnSetFileIconClass(ext) {
    const file_extension = ext.toLowerCase();
    const extensions = {
      "md": "note",
      // Images
      "avif": "image",
      "bmp": "image",
      "gif": "image",
      "ico": "image",
      "jpeg": "image",
      "jpg": "image",
      "png": "image",
      "raw": "image",
      "svg": "image",
      "tif": "image",
      "tiff": "image",
      "webp": "image",
      // Audio files
      "aac": "audio",
      "aif": "audio",
      "aifc": "audio",
      "aiff": "audio",
      "flac": "audio",
      "m4a": "audio",
      "mp3": "audio",
      "ogg": "audio",
      "wav": "audio",
      "webm": "audio",
      // Videos
      "avi": "video",
      "mov": "video",
      "mkv": "video",
      "mp4": "video",
      // PDF and other formats
      "pdf": "pdf",
      "canvas": "canvas",
      "base": "base"
    };
    if (file_extension in extensions) {
      return "dn-f-" + extensions[file_extension];
    } else {
      return "dn-f-other";
    }
  }
  // Custom Colors
  dnSetCustomColors() {
    document.body.style.setProperty("--dn-notes-color", this.color_notes);
    document.body.style.setProperty("--dn-images-color", this.color_images);
    document.body.style.setProperty("--dn-canvas-color", this.color_canvas);
    document.body.style.setProperty("--dn-videos-color", this.color_videos);
    document.body.style.setProperty("--dn-audios-color", this.color_audios);
    document.body.style.setProperty("--dn-pdfs-color", this.color_pdf);
    document.body.style.setProperty("--dn-other-color", this.color_other);
    document.body.style.setProperty("--dn-bases-color", this.color_bases);
  }
  dnToggleColoredFiles() {
    const dnMainContainer = document.getElementById("dn-container");
    if (this.colored_files) {
      dnMainContainer == null ? void 0 : dnMainContainer.classList.add("dn-colored-files");
    } else {
      dnMainContainer == null ? void 0 : dnMainContainer.classList.remove("dn-colored-files");
    }
    this.dnSetCustomColors();
  }
  dnSetView(view) {
    const divElements = [this._VIEW_DASHBOARD, this._VIEW_NAVIGATOR, this._VIEW_TAGS];
    const topNavBtns = [this._BTN_DASHBOARD, this._BTN_NAVIGATOR, this._BTN_TAGS];
    divElements.forEach((el) => {
      el.classList.add("dn-display-none");
      el.classList.remove("dn-flex");
    });
    topNavBtns.forEach((btn) => btn.classList.remove("mod-cta"));
    switch (view) {
      case 1:
        this._VIEW_DASHBOARD.classList.remove("dn-display-none");
        this._VIEW_DASHBOARD.classList.add("dn-flex");
        this._BTN_DASHBOARD.classList.add("mod-cta");
        this.dnHideTopRightNav();
        this.INPUT_SEARCH.focus();
        break;
      case 2:
        this._VIEW_NAVIGATOR.classList.remove("dn-display-none");
        this._VIEW_NAVIGATOR.classList.add("dn-flex");
        this._BTN_NAVIGATOR.classList.add("mod-cta");
        this.dnShowTopRightNav();
        this.INPUT_SEARCH.focus();
        break;
      case 3:
        this._VIEW_TAGS.classList.remove("dn-display-none");
        this._VIEW_TAGS.classList.add("dn-flex");
        this._BTN_TAGS.classList.add("mod-cta");
        this.dnHideTopRightNav();
        this.TAGS_INPUT_SEARCH.focus();
        break;
      default:
        this._VIEW_DASHBOARD.classList.remove("dn-display-none");
        this._VIEW_DASHBOARD.classList.add("dn-flex");
        this._BTN_DASHBOARD.classList.add("mod-cta");
        this.dnHideTopRightNav();
        this.INPUT_SEARCH.focus();
    }
  }
  dnShowTopRightNav() {
    this._SELECT_SORT.classList.remove("dn-display-none");
    this._SELECT_TABLE_LAYOUT.classList.remove("dn-display-none");
    this.labelLayout.classList.remove("dn-display-none");
    this.labelSort.classList.remove("dn-display-none");
  }
  dnHideTopRightNav() {
    this._SELECT_SORT.classList.add("dn-display-none");
    this._SELECT_TABLE_LAYOUT.classList.add("dn-display-none");
    this.labelLayout.classList.add("dn-display-none");
    this.labelSort.classList.add("dn-display-none");
  }
  dnSetSelectSortValue(val) {
    if (this.dnIsValidSort(val)) {
      this.selected_sort_value = val;
      this._SELECT_SORT.value = this.selected_sort_value;
    }
  }
  dnSetSelectLayoutValue(val) {
    if (this.dnIsValidLayout(val)) {
      this._SELECT_TABLE_LAYOUT.value = val;
      this.dnSelectTableLayout();
    }
  }
  dnSelectTableLayout() {
    const val = this._SELECT_TABLE_LAYOUT.value;
    if (this._TABLE_LAYOUTS.includes(val)) {
      const tbl = document.getElementById("dn-table");
      this._TABLE_LAYOUTS.forEach((layout) => tbl == null ? void 0 : tbl.classList.remove(layout));
      tbl == null ? void 0 : tbl.classList.add(val);
      this.selected_table_layout = val;
    }
  }
  dnSelectTableRow(evt) {
    if (!evt || typeof evt !== "object") {
      return;
    }
    if (evt.target instanceof HTMLTableCellElement) {
      const allTr = document.querySelectorAll("#dn-table tr");
      allTr.forEach((row) => row.classList.remove("tbl-selected"));
      const clickedTr = evt.target.parentElement;
      clickedTr.classList.add("tbl-selected");
    }
  }
  dnGenerateContextMenu(evt, file) {
    this._DN_CTX_MENU = new import_obsidian7.Menu();
    this._DN_CTX_MENU.addItem(
      (item) => item.setTitle("Open").setIcon("mouse-pointer-2").onClick(() => {
        this.app.workspace.getLeaf(false).openFile(file);
        this.close();
      })
    );
    this._DN_CTX_MENU.addSeparator();
    this._DN_CTX_MENU.addItem(
      (item) => item.setTitle("Open in new tab").setIcon("file-plus").onClick(() => {
        this.app.workspace.getLeaf("tab").openFile(file);
        this.close();
      })
    );
    this._DN_CTX_MENU.addItem(
      (item) => item.setTitle("Open to the right").setIcon("separator-vertical").onClick(() => {
        this.app.workspace.getLeaf("split").openFile(file);
        this.close();
      })
    );
    this._DN_CTX_MENU.addItem(
      (item) => item.setTitle("Open in new window").setIcon("picture-in-picture-2").onClick(() => {
        this.app.workspace.getLeaf("window").openFile(file);
      })
    );
    this._DN_CTX_MENU.addSeparator();
    this._DN_CTX_MENU.addItem(
      (item) => item.setTitle("Show preview").setIcon("eye").onClick((evt2) => {
        this.dnShowPreviewFile(evt2, file);
      })
    );
    this._DN_CTX_MENU.addSeparator();
    this._DN_CTX_MENU.addItem(
      (item) => item.setTitle("Backlinks").setIcon("links-coming-in").onClick(() => {
        const backlinksModal = new DNSpecialBacklinksModal(this.app, this, file);
        backlinksModal.open();
      })
    );
    this._DN_CTX_MENU.addItem(
      (item) => item.setTitle("Outgoing links").setIcon("links-going-out").onClick(() => {
        const outgoingLinksModal = new DNSpecialOutgoingLinksModal(this.app, this, file);
        outgoingLinksModal.open();
      })
    );
    this._DN_CTX_MENU.addSeparator();
    this._DN_CTX_MENU.addItem(
      (item) => item.setTitle("File tags").setIcon("tags").onClick(() => {
        const tagsModal = new import_obsidian7.Modal(this.app);
        tagsModal.contentEl.setAttribute("class", "dn-tags-modal");
        tagsModal.contentEl.createEl("div", { text: "File tags", cls: "setting-item setting-item-heading dn-modal-heading" });
        const rowName = tagsModal.contentEl.createEl("div", { cls: "dn-property-row" });
        rowName.createEl("div", { text: "Name: ", cls: "dn-property-name-sm" });
        rowName.createEl("div", { text: file.name, cls: "dn-property-value" });
        const rowPath = tagsModal.contentEl.createEl("div", { cls: "dn-property-row" });
        rowPath.createEl("div", { text: "Path: ", cls: "dn-property-name-sm" });
        rowPath.createEl("div", { text: getFolderStructure(file.path), cls: "dn-property-value" });
        const tagsDiv = tagsModal.contentEl.createEl("div", { cls: "dn-tags-list" });
        tagsDiv.setAttribute("contenteditable", "true");
        tagsDiv.setAttribute("spellcheck", "false");
        const mTags = getTagsPerFile(file);
        if (mTags) {
          const tags_file = mTags.split(" ");
          tags_file.forEach((tag) => {
            const tagLineDiv = tagsDiv.createEl("div", { cls: "dn-tag-line" });
            tagLineDiv.createEl("a", { cls: "tag", text: tag, href: tag }).onClickEvent((evt2) => {
              this.handleTagActions(evt2, tag);
            });
          });
        } else {
          tagsDiv.createEl("span", { text: "No tags" });
        }
        tagsModal.contentEl.createEl("br");
        const divBottom = tagsModal.contentEl.createEl("div", { cls: "dn-div-bottom-properties" });
        const btnPropsOpen = divBottom.createEl("button", { text: "Open", cls: "dn-btn-properties-open-file" });
        btnPropsOpen.onClickEvent(() => {
          tagsModal.close();
          this.dnOpenFile(file);
        });
        const btnCloseProps = divBottom.createEl("button", { text: "Close", cls: "dn-btn-properties-close" });
        btnCloseProps.onClickEvent(() => {
          tagsModal.close();
        });
        tagsModal.open();
        tagsDiv.blur();
      })
    );
    this._DN_CTX_MENU.addItem(
      (item) => item.setTitle("File frontmatter").setIcon("text").onClick(() => {
        const fmModal = new import_obsidian7.Modal(this.app);
        fmModal.contentEl.setAttribute("class", "dn-frontmatter-modal");
        fmModal.contentEl.createEl("div", { text: "File frontmatter", cls: "setting-item setting-item-heading dn-modal-heading" });
        const rowName = fmModal.contentEl.createEl("div", { cls: "dn-property-row" });
        rowName.createEl("div", { text: "Name: ", cls: "dn-property-name-sm" });
        rowName.createEl("div", { text: file.name, cls: "dn-property-value" });
        const rowPath = fmModal.contentEl.createEl("div", { cls: "dn-property-row" });
        rowPath.createEl("div", { text: "Path: ", cls: "dn-property-name-sm" });
        rowPath.createEl("div", { text: getFolderStructure(file.path), cls: "dn-property-value" });
        const frontmatterDiv = fmModal.contentEl.createEl("div", { cls: "dn-properties-frontmatter-modal" });
        frontmatterDiv.setAttribute("contenteditable", "true");
        frontmatterDiv.setAttribute("spellcheck", "false");
        const curProps = getPropsPerFile(file);
        if (curProps) {
          const prop = curProps.split(" \n");
          for (let i = 0, len = prop.length; i < len; i++) {
            frontmatterDiv.createEl("a", { text: prop[i], cls: "dn-fproperties" }).onClickEvent((evt2) => {
              if (evt2.button === 2) {
                evt2.preventDefault();
              } else {
                fmModal.close();
                this.INPUT_SEARCH.value = prop[i];
                this.dnModalSearchVault(this.INPUT_SEARCH.value);
              }
            });
            frontmatterDiv.createEl("br");
          }
        } else {
          frontmatterDiv.createEl("span", { text: "No frontmatter" });
        }
        fmModal.contentEl.createEl("br");
        const divBottom = fmModal.contentEl.createEl("div", { cls: "dn-div-bottom-properties" });
        const btnPropsOpen = divBottom.createEl("button", { text: "Open", cls: "dn-btn-properties-open-file" });
        btnPropsOpen.onClickEvent(() => {
          fmModal.close();
          this.dnOpenFile(file);
        });
        const btnCloseProps = divBottom.createEl("button", { text: "Close", cls: "dn-btn-properties-close" });
        btnCloseProps.onClickEvent(() => {
          fmModal.close();
        });
        fmModal.open();
        frontmatterDiv.blur();
      })
    );
    this._DN_CTX_MENU.addSeparator();
    this._DN_CTX_MENU.addItem(
      (item) => item.setTitle("File properties").setIcon("file-cog").onClick(() => {
        const filePropsModal = new import_obsidian7.Modal(this.app);
        filePropsModal.contentEl.setAttribute("class", "dn-properties-modal");
        filePropsModal.contentEl.createEl("div", { text: "File properties", cls: "setting-item setting-item-heading dn-modal-heading" });
        const rowName = filePropsModal.contentEl.createEl("div", { cls: "dn-property-row" });
        rowName.createEl("div", { text: "Name: ", cls: "dn-property-name" });
        rowName.createEl("div", { text: file.name, cls: "dn-property-value" });
        const rowExt = filePropsModal.contentEl.createEl("div", { cls: "dn-property-row" });
        rowExt.createEl("div", { text: "Extension: ", cls: "dn-property-name" });
        const rowExtValue = rowExt.createEl("div", { cls: "dn-property-value" });
        rowExtValue.createEl("span", { text: file.extension, cls: "nav-file-tag" });
        const rowPath = filePropsModal.contentEl.createEl("div", { cls: "dn-property-row" });
        rowPath.createEl("div", { text: "Path: ", cls: "dn-property-name" });
        rowPath.createEl("div", { text: getFolderStructure(file.path), cls: "dn-property-value" });
        filePropsModal.contentEl.createEl("br");
        const rowSize = filePropsModal.contentEl.createEl("div", { cls: "dn-property-row" });
        rowSize.createEl("div", { text: "Size: ", cls: "dn-property-name" });
        rowSize.createEl("div", { text: formatFileSize(file.stat.size) + " bytes" + formatFileSizeKBMB(file.stat.size) });
        filePropsModal.contentEl.createEl("br");
        const rowDateCreated = filePropsModal.contentEl.createEl("div", { cls: "dn-property-row" });
        rowDateCreated.createEl("div", { text: "Created: ", cls: "dn-property-name" });
        rowDateCreated.createEl("div", { text: (0, import_obsidian8.moment)(file.stat.ctime).format(this.date_format) });
        const rowDateModified = filePropsModal.contentEl.createEl("div", { cls: "dn-property-row" });
        rowDateModified.createEl("div", { text: "Modified: ", cls: "dn-property-name" });
        rowDateModified.createEl("div", { text: (0, import_obsidian8.moment)(file.stat.mtime).format(this.date_format) });
        filePropsModal.contentEl.createEl("br");
        const rowTags = filePropsModal.contentEl.createEl("div", { cls: "dn-property-row" });
        rowTags.createEl("div", { text: "Tag(s): ", cls: "dn-property-name" });
        const propTags = rowTags.createEl("div");
        const curTags = getTagsPerFile(file);
        if (curTags !== "") {
          const tags = curTags.split(" ");
          for (let i = 0, len = tags.length; i < len; i++) {
            propTags.createEl("a", { text: tags[i], href: tags[i], cls: "tag" }).onClickEvent((evt2) => {
              this.handleTagActions(evt2, tags[i]);
            });
          }
        } else {
          propTags.createEl("span", { text: "No tags" });
        }
        const rowFrontmatter = filePropsModal.contentEl.createEl("div", { cls: "dn-property-row" });
        rowFrontmatter.createEl("div", { text: "Frontmatter: ", cls: "dn-property-name" });
        const rowFrontmatterValue = rowFrontmatter.createEl("div", { cls: "dn-property-value" });
        const frontmatterProps = rowFrontmatterValue.createEl("div", { cls: "dn-properties-frontmatter" });
        frontmatterProps.setAttribute("contenteditable", "true");
        frontmatterProps.setAttribute("spellcheck", "false");
        const curProps = getPropsPerFile(file);
        if (curProps) {
          const prop = curProps.split(" \n");
          for (let i = 0, len = prop.length; i < len; i++) {
            frontmatterProps.createEl("a", { text: prop[i], cls: "dn-fproperties" }).onClickEvent((evt2) => {
              if (evt2.button === 2) {
                evt2.preventDefault();
              } else {
                filePropsModal.close();
                this.INPUT_SEARCH.value = prop[i];
                this.dnModalSearchVault(this.INPUT_SEARCH.value);
              }
            });
            frontmatterProps.createEl("br");
          }
        } else {
          frontmatterProps.createEl("span", { text: "No frontmatter" });
        }
        filePropsModal.contentEl.createEl("br");
        const divBottom = filePropsModal.contentEl.createEl("div", { cls: "dn-div-bottom-properties" });
        const btnPropsOpen = divBottom.createEl("button", { text: "Open", cls: "dn-btn-properties-open-file" });
        btnPropsOpen.onClickEvent(() => {
          filePropsModal.close();
          this.dnOpenFile(file);
        });
        const btnCloseProps = divBottom.createEl("button", { text: "Close", cls: "dn-btn-properties-close" });
        btnCloseProps.onClickEvent(() => {
          filePropsModal.close();
        });
        filePropsModal.open();
        frontmatterProps.blur();
      })
    );
    this._DN_CTX_MENU.showAtMouseEvent(evt);
  }
  dnHandleClick(evt, file) {
    if (!evt || typeof evt !== "object" || !(file instanceof import_obsidian7.TFile)) {
      return;
    }
    this.dnSelectTableRow(evt);
    if (evt.button === 2) {
      evt.preventDefault();
      this.dnGenerateContextMenu(evt, file);
    }
  }
  dnHandleDblClick(evt, file) {
    if (!evt || typeof evt !== "object" || !(file instanceof import_obsidian7.TFile)) {
      return;
    }
    evt.preventDefault();
    this.dnSelectTableRow(evt);
    this.dnOpenFile(file);
  }
  dnHandleHoverPreview(evt, file) {
    evt.stopImmediatePropagation();
    if (evt.ctrlKey || evt.metaKey) {
      this.dnShowPreviewFile(evt, file);
    }
  }
  dnShowPreviewFile(evt, file) {
    this._hoverDiv.empty();
    this.modalEl.addEventListener("click", () => {
      this.dnHidePreview();
    });
    const topBar = this._hoverDiv.createEl("div", { cls: "dn-preview-top-bar" });
    const btnClosePreview = topBar.createEl("div", { cls: "modal-close-button" });
    btnClosePreview.onClickEvent(() => {
      this.dnHidePreview();
    });
    const previewTop = topBar.createEl("div", "dn-preview-titlebar");
    const divPreviewName = previewTop.createEl("div", { cls: "dn-property-row" });
    divPreviewName.createEl("div", { text: "Name: ", cls: "dn-property-name-sm" });
    divPreviewName.createEl("div", { text: file.name, cls: "dn-property-value" });
    const divPreviewPath = previewTop.createEl("div", { cls: "dn-property-row" });
    divPreviewPath.createEl("div", { text: "Path: ", cls: "dn-property-name-sm" });
    divPreviewPath.createEl("div", { text: getFolderStructure(file.path), cls: "dn-property-value" });
    const divButtons = topBar.createEl("div", { cls: "dn-div-top-preview-btns" });
    const btnPreviewOpenFile = divButtons.createEl("button", { text: "Open", cls: "dn-btn-properties-open-file" });
    btnPreviewOpenFile.onClickEvent(() => {
      this.dnHidePreview();
      this.close();
      this.dnOpenFile(file);
    });
    const btnPreviewOpenFileNewTab = divButtons.createEl("button", { text: "Open in new tab", cls: "dn-btn-properties-open-file" });
    btnPreviewOpenFileNewTab.onClickEvent(() => {
      this.dnHidePreview();
      this.close();
      this.app.workspace.getLeaf("tab").openFile(file);
    });
    const btnPreviewOpenFileNewWindow = divButtons.createEl("button", { text: "Open in new window", cls: "dn-btn-properties-open-file" });
    btnPreviewOpenFileNewWindow.onClickEvent(() => {
      this.dnHidePreview();
      this.app.workspace.getLeaf("window").openFile(file);
    });
    this._hoverRender = this._hoverDiv.createEl("div", { cls: "dn-pr-content" });
    try {
      import_obsidian7.MarkdownRenderer.render(
        this.app,
        "![[" + (0, import_obsidian7.normalizePath)(file.path) + "]]",
        this._hoverRender,
        (0, import_obsidian7.normalizePath)(file.path),
        this._previewComponent
      );
    } catch (error) {
      return;
    }
    this._hoverDiv.style.display = "block";
    previewTop.addEventListener("mousedown", (evt2) => this.dnHoverDragOnMouseDown(evt2));
    this._hoverDiv.addEventListener("mousemove", (evt2) => this.dnHoverDragOnMouseMove(evt2));
    this._hoverDiv.addEventListener("mouseup", (evt2) => this.dnHoverDragOnMouseUp(evt2));
    const screenWidth = window.innerWidth;
    const screenHeight = window.innerHeight;
    const divW = this._hoverDiv.offsetWidth;
    const divH = this._hoverDiv.offsetHeight;
    if (this._hoverDivLeft === "") {
      this._hoverDiv.style.left = ((screenWidth - divW) / 2).toString() + "px";
      this._hoverDiv.style.top = ((screenHeight - divH) / 2).toString() + "px";
    }
    previewTop.removeEventListener("mousedown", (evt2) => this.dnHoverDragOnMouseDown(evt2));
    this.modalEl.removeEventListener("click", (evt2) => {
      this.dnHidePreview();
    });
  }
  dnHidePreview() {
    this._isDraggingPreview = false;
    this._hoverDiv.style.display = "none";
    this._hoverDiv.empty();
  }
  dnHandleNormalSearch(rExp, file) {
    return rExp.test(file.name.toLowerCase()) || rExp.test(getFolderStructure(file.path).toLowerCase()) || rExp.test((0, import_obsidian8.moment)(file.stat.mtime).format(this.date_format)) || rExp.test(getTagsPerFile(file).toLowerCase()) || rExp.test(getPropsPerFile(file).toLowerCase());
  }
  dnHandleSpecialSearch(search, file) {
    const mtime = (0, import_obsidian8.moment)(file.stat.mtime);
    switch (search) {
      case "d":
      case "day":
      case "today":
        return mtime.isSame((0, import_obsidian8.moment)(), "day");
      case "d-1":
      case "day-1":
      case "yesterday":
        return mtime.isBetween((0, import_obsidian8.moment)().subtract(1, "days"), (0, import_obsidian8.moment)(), "day", "[]");
      case "d-2":
      case "day-2":
        return mtime.isBetween((0, import_obsidian8.moment)().subtract(2, "days"), (0, import_obsidian8.moment)(), "day", "[]");
      case "d-3":
      case "day-3":
        return mtime.isBetween((0, import_obsidian8.moment)().subtract(3, "days"), (0, import_obsidian8.moment)(), "day", "[]");
      case "d-4":
      case "day-4":
        return mtime.isBetween((0, import_obsidian8.moment)().subtract(4, "days"), (0, import_obsidian8.moment)(), "day", "[]");
      case "d-5":
      case "day-5":
        return mtime.isBetween((0, import_obsidian8.moment)().subtract(5, "days"), (0, import_obsidian8.moment)(), "day", "[]");
      case "d-6":
      case "day-6":
        return mtime.isBetween((0, import_obsidian8.moment)().subtract(6, "days"), (0, import_obsidian8.moment)(), "day", "[]");
      case "d-7":
      case "day-7":
      case "w":
      case "week":
        return mtime.isBetween((0, import_obsidian8.moment)().subtract(7, "days"), (0, import_obsidian8.moment)(), "day", "[]");
      case "m":
      case "month":
        return mtime.isSame((0, import_obsidian8.moment)(), "month");
      case "m-1":
      case "month-1":
        return mtime.isBetween((0, import_obsidian8.moment)().subtract(1, "month"), (0, import_obsidian8.moment)(), "month", "[]");
      case "m-2":
      case "month-2":
        return mtime.isBetween((0, import_obsidian8.moment)().subtract(2, "month"), (0, import_obsidian8.moment)(), "month", "[]");
      case "m-3":
      case "month-3":
        return mtime.isBetween((0, import_obsidian8.moment)().subtract(3, "month"), (0, import_obsidian8.moment)(), "month", "[]");
      case "m-4":
      case "month-4":
        return mtime.isBetween((0, import_obsidian8.moment)().subtract(4, "month"), (0, import_obsidian8.moment)(), "month", "[]");
      case "m-5":
      case "month-5":
        return mtime.isBetween((0, import_obsidian8.moment)().subtract(5, "month"), (0, import_obsidian8.moment)(), "month", "[]");
      case "m-6":
      case "month-6":
        return mtime.isBetween((0, import_obsidian8.moment)().subtract(6, "month"), (0, import_obsidian8.moment)(), "month", "[]");
      case "m-7":
      case "month-7":
        return mtime.isBetween((0, import_obsidian8.moment)().subtract(7, "month"), (0, import_obsidian8.moment)(), "month", "[]");
      case "m-8":
      case "month-8":
        return mtime.isBetween((0, import_obsidian8.moment)().subtract(8, "month"), (0, import_obsidian8.moment)(), "month", "[]");
      case "m-9":
      case "month-9":
        return mtime.isBetween((0, import_obsidian8.moment)().subtract(9, "month"), (0, import_obsidian8.moment)(), "month", "[]");
      case "m-10":
      case "month-10":
        return mtime.isBetween((0, import_obsidian8.moment)().subtract(10, "month"), (0, import_obsidian8.moment)(), "month", "[]");
      case "m-11":
      case "month-11":
        return mtime.isBetween((0, import_obsidian8.moment)().subtract(11, "month"), (0, import_obsidian8.moment)(), "month", "[]");
      case "m-12":
      case "month-12":
        return mtime.isBetween((0, import_obsidian8.moment)().subtract(12, "month"), (0, import_obsidian8.moment)(), "month", "[]");
      case "y":
      case "year":
        return mtime.isSame((0, import_obsidian8.moment)(), "year");
      case "n":
      case "notes":
        return this._notes.includes(file);
      case "c":
      case "canvases":
      case "canvas":
        return this._canvas.includes(file);
      case "i":
      case "images":
        return this._images.includes(file);
      case "a":
      case "audio":
      case "audios":
        return this._audios.includes(file);
      case "v":
      case "video":
      case "videos":
        return this._videos.includes(file);
      case "p":
      case "pdf":
      case "pdfs":
        return this._pdf.includes(file);
      case "o":
      case "other":
      case "others":
        return this._other.includes(file);
      case "bm":
      case "bookmarks":
        return this._bookmarks.includes(file);
      case "bb":
      case "bases":
        return this._bases.includes(file);
      case "tags":
        this.dnSetView(3);
        this.TAGS_INPUT_SEARCH.value = this.INPUT_SEARCH.value.replace(/@\S+/g, "");
        return this.dnTDSearchTags(this.TAGS_INPUT_SEARCH.value);
      default:
        return false;
    }
  }
  dnOpenFileAlt(f, evt) {
    if (!evt || typeof evt !== "object" || !(f instanceof import_obsidian7.TFile)) {
      return;
    }
    try {
      if (evt.button === 0 && (evt.ctrlKey || evt.metaKey)) {
        this.app.workspace.getLeaf("tab").openFile(f);
      } else if (evt.button === 1) {
        this.app.workspace.getLeaf("tab").openFile(f);
      } else if (evt.button === 0) {
        this.dnOpenFile(f);
      } else if (evt.button === 2 && !(evt.target instanceof HTMLTableCellElement)) {
        evt.preventDefault();
        this.dnGenerateContextMenu(evt, f);
      }
    } catch (er) {
      return;
    }
  }
  dnOpenFile(file) {
    this.app.workspace.getLeaf(false).openFile(file);
    this.close();
  }
  dnHoverDragOnMouseDown(evt) {
    evt.stopPropagation();
    this._isDraggingPreview = true;
    this.initialX = evt.screenX - this._hoverDiv.offsetLeft;
    this.initialY = evt.screenY - this._hoverDiv.offsetTop;
    this.previousX = evt.screenX;
    this.previousY = evt.screenY;
  }
  dnHoverDragOnMouseMove(evt) {
    evt.stopPropagation();
    if (this._isDraggingPreview) {
      const newX = evt.screenX - this.initialX;
      const newY = evt.screenY - this.initialY;
      if (Math.abs(evt.screenX - this.previousX) > 5 || Math.abs(evt.screenY - this.previousY) > 5) {
        this._hoverDiv.style.left = newX + "px";
        this._hoverDiv.style.top = newY + "px";
        this.previousX = evt.screenX;
        this.previousY = evt.screenY;
      }
      this._hoverDivLeft = newX + "px";
      this._hoverDivTop = newY + "px";
    }
  }
  dnHoverDragOnMouseUp(evt) {
    evt.stopPropagation();
    this._isDraggingPreview = false;
  }
  handleTagActions(evt, tag) {
    if (evt.button === 2) {
      evt.preventDefault();
    } else if (evt.button === 0 && evt.shiftKey) {
      this.dnAddTagToSearch(tag, false);
    } else if (evt.button === 0 && (evt.ctrlKey || evt.metaKey)) {
      this.dnAddTagToSearch(tag, true);
    } else if (evt.button === 1 && (evt.shiftKey || evt.ctrlKey || evt.metaKey)) {
      this.clearSearchField();
    } else {
      this.INPUT_SEARCH.value = tag;
      this.dnModalSearchVault(this.INPUT_SEARCH.value);
    }
  }
  handleTagActionsTagsDashboard(evt, tag) {
    this.modalEl.scrollTo({ top: 0, behavior: "smooth" });
    this.TAGS_SIDEBAR_EL.scrollTo({ top: 0, behavior: "smooth" });
    if (evt.button === 2) {
      evt.preventDefault();
    } else if (evt.button === 0 && evt.shiftKey) {
      this.dnAddTagToSearchTD(tag, false);
    } else if (evt.button === 0 && (evt.ctrlKey || evt.metaKey)) {
      this.dnAddTagToSearchTD(tag, true);
    } else if (evt.button === 1 && (evt.shiftKey || evt.ctrlKey || evt.metaKey)) {
      this.clearTagsSearchField();
    } else {
      this.TAGS_INPUT_SEARCH.value = tag;
      this.dnTDSearchTags(this.TAGS_INPUT_SEARCH.value);
    }
  }
  // Tag actions -> add/remove tag and/or !tag
  dnAddTagToSearch(tag, exclude = false) {
    let searchTerms = this.INPUT_SEARCH.value.split(" ");
    const lowerCaseTag = tag.toLowerCase();
    const targetTag = exclude ? `!${lowerCaseTag}` : lowerCaseTag;
    const oppositeTag = exclude ? lowerCaseTag : `!${lowerCaseTag}`;
    searchTerms = searchTerms.filter((term) => term !== oppositeTag);
    const index = searchTerms.indexOf(targetTag);
    if (index !== -1) {
      searchTerms.splice(index, 1);
    } else {
      searchTerms.push(targetTag);
    }
    const newSearchValue = searchTerms.join(" ");
    this.INPUT_SEARCH.value = newSearchValue;
    this.dnModalSearchVault(this.INPUT_SEARCH.value);
  }
  dnAddTagToSearchTD(tag, exclude = false) {
    let searchTerms = this.TAGS_INPUT_SEARCH.value.toLowerCase().split(" ");
    const lowerCaseTag = tag.toLowerCase();
    const targetTag = exclude ? `!${lowerCaseTag}` : lowerCaseTag;
    const oppositeTag = exclude ? lowerCaseTag : `!${lowerCaseTag}`;
    searchTerms = searchTerms.filter((term) => term !== oppositeTag);
    const index = searchTerms.indexOf(targetTag);
    if (index !== -1) {
      searchTerms.splice(index, 1);
    } else {
      searchTerms.push(targetTag);
    }
    const newSearchValue = searchTerms.join(" ");
    this.TAGS_INPUT_SEARCH.value = newSearchValue;
    this.dnTDSearchTags(this.TAGS_INPUT_SEARCH.value);
    this.modalEl.scrollTo({ top: 0, behavior: "smooth" });
    this.TAGS_SIDEBAR_EL.scrollTo({ top: 0, behavior: "smooth" });
  }
  async dnLoadSearchOnClose() {
    this.INPUT_SEARCH.value = this.plugin.settings.onclose_search;
    this.plugin.saveSettings();
  }
  dnSaveStateOnClose() {
    this.plugin.settings.primary_tags_results_visible = this.primary_tags_results_visible;
    this.plugin.settings.tags_sidebar = this.tags_sidebar;
    this.plugin.settings.tags_sidebar_sorted_by_frequency = this.tags_sidebar_sorted_by_frequency;
    this.plugin.settings.onclose_search = this.INPUT_SEARCH.value;
    this.plugin.saveSettings();
  }
  async dnRedrawResultsTable() {
    await this.dnShowModalSearchResults({ f: this._files_results, el: this._divSearchResults, leaf: this._leaf, currentPage: this.current_page });
  }
  dnTDGetTags(file) {
    var _a, _b;
    const cur_file = this.app.vault.getAbstractFileByPath(file.path);
    if (cur_file !== null) {
      const tags = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.tags;
      const frontmatter_tags = (_b = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _b.frontmatter;
      const arrTags = [];
      if (tags) {
        for (let i = 0, len = tags.length; i < len; i++) {
          if (arrTags.indexOf(tags[i].tag) < 0) {
            arrTags.push(tags[i].tag);
          }
        }
      }
      if (frontmatter_tags !== void 0 && frontmatter_tags.tags) {
        for (let i = 0, len = frontmatter_tags.tags.length; i < len; i++) {
          const fmTag = "#" + frontmatter_tags.tags[i];
          if (arrTags.indexOf(fmTag) < 0) {
            arrTags.push(fmTag);
          }
        }
      }
      return arrTags;
    } else {
      return [];
    }
  }
  dnTDSearchTags(val) {
    var _a;
    if (val === "") {
      this.TAGS_RECENT_FILES_EL.classList.remove("dn-hidden");
      this.BTN_CLEAR_TAGS_INPUT_SEARCH.style.display = "none";
    } else {
      this.TAGS_RECENT_FILES_EL.classList.add("dn-hidden");
      this.BTN_CLEAR_TAGS_INPUT_SEARCH.style.display = "flex";
    }
    const tagSearchInput = val.trim();
    if (!tagSearchInput) {
      this.TAGS_RESULTS_EL.empty();
      this.tagsCurrentPage = 0;
      this.filteredPrimaryTagNotes = [];
      this.generateTagsSidebar(this.TAGS_SIDEBAR_EL, this._data.tags);
      return;
    }
    this.TAGS_RESULTS_EL.empty();
    const allNotes = this._notes;
    const allInputTags = tagSearchInput.split(" ").filter((t) => t.length > 0);
    const primarySearchTags = allInputTags.filter((t) => !t.startsWith("!")).map((t) => t.startsWith("#") ? t : `#${t}`);
    const excludedSearchTags = allInputTags.filter((t) => t.startsWith("!")).map((t) => t.substring(1).startsWith("#") ? t.substring(1) : `#${t.substring(1)}`);
    const normalizedPrimaryTags = primarySearchTags.map((t) => t.toLowerCase());
    const normalizedExcludedTags = excludedSearchTags.map((t) => t.toLowerCase());
    const primaryTagHeading = primarySearchTags.length > 1 ? `${primarySearchTags.join(" ")}` : `${primarySearchTags[0] || "No primary tag(s)"}`;
    const primaryTagsDiv = this.TAGS_RESULTS_EL.createEl("div", { cls: "dn-td-tag-group-card dn-td-primary-tag-group" });
    const headingEl = primaryTagsDiv.createEl("h3", { text: primaryTagHeading });
    if (excludedSearchTags.length > 0) {
      headingEl.createEl("span", {
        text: ` (NOT ${excludedSearchTags.join(" NOT ")})`,
        cls: "dn-td-excluded-tags"
      });
    }
    const btnTogglePrimaryTagsResults = primaryTagsDiv.createEl("button", { cls: "btn-td-toggle-primary-tags" });
    btnTogglePrimaryTagsResults.setAttribute("aria-label", "Toggle primary tags results");
    btnTogglePrimaryTagsResults.setAttribute("data-tooltip-position", "bottom");
    this.PRIMARY_TAGS_RESULTS_DIV = primaryTagsDiv.createEl("div", { cls: "dn-td-primary-tags-results" });
    if (this.primary_tags_results_visible) {
      btnTogglePrimaryTagsResults.textContent = "-";
      this.PRIMARY_TAGS_RESULTS_DIV.classList.remove("dn-hidden");
    } else {
      btnTogglePrimaryTagsResults.textContent = "+";
      this.PRIMARY_TAGS_RESULTS_DIV.classList.add("dn-hidden");
    }
    btnTogglePrimaryTagsResults.onClickEvent(() => {
      this.primary_tags_results_visible = !this.primary_tags_results_visible;
      this.PRIMARY_TAGS_RESULTS_DIV.classList.toggle("dn-hidden", !this.primary_tags_results_visible);
      if (this.primary_tags_results_visible) {
        btnTogglePrimaryTagsResults.textContent = "-";
      } else {
        btnTogglePrimaryTagsResults.textContent = "+";
      }
    });
    const primaryTagNotes = [];
    const secondaryTagGroups = /* @__PURE__ */ new Map();
    for (const file of allNotes) {
      const tagsForFileOriginalCase = this.dnTDGetTags(file);
      const tagsForFileNormalized = tagsForFileOriginalCase.map((tag) => tag.toLowerCase());
      const hasAllPrimaryTags = normalizedPrimaryTags.every((inputTag) => tagsForFileNormalized.includes(inputTag));
      const hasExcludedTags = normalizedExcludedTags.some((excludedTag) => tagsForFileNormalized.includes(excludedTag));
      if (hasAllPrimaryTags && !hasExcludedTags) {
        primaryTagNotes.push(file);
        const secondaryTagsOriginalCase = tagsForFileOriginalCase.filter(
          (tag) => !normalizedPrimaryTags.includes(tag.toLowerCase()) && !normalizedExcludedTags.includes(tag.toLowerCase())
        );
        for (const secTagOriginalCase of secondaryTagsOriginalCase) {
          if (!secondaryTagGroups.has(secTagOriginalCase)) {
            secondaryTagGroups.set(secTagOriginalCase, []);
          }
          (_a = secondaryTagGroups.get(secTagOriginalCase)) == null ? void 0 : _a.push(file);
        }
      }
    }
    this.filteredPrimaryTagNotes = primaryTagNotes.sort((a, b) => b.stat.mtime - a.stat.mtime);
    const sortedSecondaryTagGroups = new Map(
      Array.from(secondaryTagGroups.entries()).sort(
        ([tagNameA], [tagNameB]) => tagNameA.toLowerCase().localeCompare(tagNameB.toLowerCase())
      )
    );
    this.generateTagsSidebar(this.TAGS_SIDEBAR_EL, sortedSecondaryTagGroups);
    const TAGS_PAGINATION_LIMIT = 10;
    const startIndex = this.tagsCurrentPage * TAGS_PAGINATION_LIMIT;
    const endIndex = startIndex + TAGS_PAGINATION_LIMIT;
    const displayPrimaryNotes = this.filteredPrimaryTagNotes.slice(startIndex, endIndex);
    if (this.filteredPrimaryTagNotes.length === 0) {
      primaryTagsDiv.createEl("p", { text: "No notes found matching the specified tag(s).", cls: "dn-td-no-notes-message" });
    } else {
      const paginationDiv = this.PRIMARY_TAGS_RESULTS_DIV.createEl("div", { cls: "dn-td-pagination" });
      paginationDiv.createEl("div", {
        text: `File(s): ${this.filteredPrimaryTagNotes.length}`,
        cls: "dn-pagination-total-results"
      });
      const dnTdPaginationDiv = paginationDiv.createEl("div", { cls: "dn-pagination-current-page" });
      const totalPages = Math.ceil(this.filteredPrimaryTagNotes.length / TAGS_PAGINATION_LIMIT);
      dnTdPaginationDiv.createEl("span", { text: ` Page ${this.tagsCurrentPage + 1} of ${totalPages} `, cls: "dn-td-total-pages" });
      const prevButton = dnTdPaginationDiv.createEl("button", { text: "\u25C0", title: "Previous", cls: "dn-btn-prev" });
      prevButton.disabled = this.tagsCurrentPage === 0;
      prevButton.onClickEvent(() => {
        this._tagsPrevPage();
      });
      const nextButton = dnTdPaginationDiv.createEl("button", { text: "\u25B6", title: "Next", cls: "dn-btn-next" });
      nextButton.disabled = this.tagsCurrentPage >= totalPages - 1;
      nextButton.onClickEvent(() => {
        this._tagsNextPage();
      });
      for (const note of displayPrimaryNotes) {
        const linkPrimaryTag = this.PRIMARY_TAGS_RESULTS_DIV.createEl("a", {
          text: note.basename,
          href: note.path,
          title: `${note.path}

${(0, import_obsidian8.moment)(note.stat.mtime).format(this.date_format)} - Modified
${(0, import_obsidian8.moment)(note.stat.ctime).format(this.date_format)} - Created`,
          cls: "dn-f-note"
        });
        linkPrimaryTag.setAttribute("data-href", note.path);
        linkPrimaryTag.onClickEvent((evt) => {
          if (this._leaf !== null && note !== null) {
            this.dnOpenFileAlt(note, evt);
          }
        });
        linkPrimaryTag.addEventListener("mouseover", (evt) => this.dnHandleHoverPreview(evt, note));
      }
    }
    const secondaryTagsDiv = this.TAGS_RESULTS_EL.createEl("div", { cls: "dn-td-secondary-tags-container" });
    for (const [secTag, notesInGroup] of sortedSecondaryTagGroups.entries()) {
      notesInGroup.sort((a, b) => b.stat.mtime - a.stat.mtime);
      const secTagDiv = secondaryTagsDiv.createEl("div", { cls: "dn-td-tag-group-card dn-td-secondary-tag-group" });
      secTagDiv.createEl("h3", { text: secTag }).onClickEvent((evt) => {
        this.handleTagActionsTagsDashboard(evt, secTag);
      });
      const displayNotes = notesInGroup.slice(0, 5);
      for (const note of displayNotes) {
        const linkSecondaryTag = secTagDiv.createEl("a", {
          text: note.basename,
          href: note.path,
          title: `${note.path}

${(0, import_obsidian8.moment)(note.stat.mtime).format(this.date_format)} - Modified
${(0, import_obsidian8.moment)(note.stat.ctime).format(this.date_format)} - Created`,
          cls: "dn-f-note"
        });
        linkSecondaryTag.setAttribute("data-href", note.path);
        linkSecondaryTag.onClickEvent((evt) => {
          if (this._leaf !== null && note !== null) {
            this.dnOpenFileAlt(note, evt);
          }
        });
        linkSecondaryTag.addEventListener("mouseover", (evt) => this.dnHandleHoverPreview(evt, note));
        secTagDiv.createEl("br");
      }
      if (notesInGroup.length > 5) {
        secTagDiv.createEl("br");
        secTagDiv.createEl("button", { text: `Show All (${notesInGroup.length})`, cls: "dn-td-show-more" }).onClickEvent(() => {
          this.tagsCurrentPage = 0;
          const currentInput = this.TAGS_INPUT_SEARCH.value;
          const newTag = secTag.startsWith("#") ? secTag : `#${secTag}`;
          if (!currentInput.includes(newTag)) {
            this.TAGS_INPUT_SEARCH.value = currentInput + " " + newTag;
            this.dnTDSearchTags(this.TAGS_INPUT_SEARCH.value);
          }
          this.modalEl.scrollTo({ top: 0, behavior: "smooth" });
          this.TAGS_SIDEBAR_EL.scrollTo({ top: 0, behavior: "smooth" });
        });
      }
    }
  }
  _tagsPrevPage() {
    if (this.tagsCurrentPage > 0) {
      this.tagsCurrentPage--;
      this.dnTDSearchTags(this.TAGS_INPUT_SEARCH.value);
    }
  }
  _tagsNextPage() {
    this.tagsCurrentPage++;
    this.dnTDSearchTags(this.TAGS_INPUT_SEARCH.value);
  }
  generateTagsSidebar(el, tags) {
    el.empty();
    const container = el.createEl("div", { cls: "dn-td-sidebar-container" });
    container.createEl("div", { text: "Sort tags by:", cls: "dn-tags-sidebar-label" });
    const sortButtonsContainer = container.createEl("div", { cls: "dn-td-sidebar-sort-buttons" });
    const btnAlphaSort = sortButtonsContainer.createEl("button", {
      text: "Tag name (A-Z)",
      cls: "dn-td-sidebar-sort-button"
    });
    btnAlphaSort.setAttribute("aria-label", "Sort sidebar tags by name (A-Z) ");
    btnAlphaSort.setAttribute("data-tooltip-position", "bottom");
    const btnFrequencySort = sortButtonsContainer.createEl("button", {
      text: "Frequency (high to low)",
      cls: "dn-td-sidebar-sort-button"
    });
    btnFrequencySort.setAttribute("aria-label", "Sort sidebar tags by frequency (high to low) ");
    btnFrequencySort.setAttribute("data-tooltip-position", "bottom");
    if (this.tags_sidebar_sorted_by_frequency) {
      btnFrequencySort.classList.add("tags-sort-active");
      btnAlphaSort.classList.remove("tags-sort-active");
    } else {
      btnAlphaSort.classList.add("tags-sort-active");
      btnFrequencySort.classList.remove("tags-sort-active");
    }
    btnAlphaSort.onClickEvent(() => {
      this.tags_sidebar_sorted_by_frequency = false;
      btnAlphaSort.classList.add("tags-sort-active");
      btnFrequencySort.classList.remove("tags-sort-active");
      this.renderTags(tags);
    });
    btnFrequencySort.onClickEvent(() => {
      this.tags_sidebar_sorted_by_frequency = true;
      btnFrequencySort.classList.add("tags-sort-active");
      btnAlphaSort.classList.remove("tags-sort-active");
      this.renderTags(tags);
    });
    this.TAGS_SIDEBAR_LIST_DIV = container.createEl("div", { cls: "dn-td-sidebar-tags-list" });
    this.renderTags(tags);
  }
  renderTags(tags) {
    this.TAGS_SIDEBAR_LIST_DIV.empty();
    const tagsToRender = Array.from(tags.entries());
    if (this.tags_sidebar_sorted_by_frequency) {
      tagsToRender.sort((a, b) => b[1].length - a[1].length);
    } else {
      tagsToRender.sort((a, b) => {
        const tagNameA = a[0];
        const tagNameB = b[0];
        const lowerCaseTagNameA = tagNameA.toLowerCase();
        const lowerCaseTagNameB = tagNameB.toLowerCase();
        return lowerCaseTagNameA.localeCompare(lowerCaseTagNameB);
      });
    }
    if (tagsToRender.length === 0) {
      this.TAGS_SIDEBAR_LIST_DIV.createEl("div", {
        text: "No matching tags found.",
        cls: "dn-td-sidebar-tag-div"
      });
      return;
    }
    for (const [tag, files] of tagsToRender) {
      const tagEl = this.TAGS_SIDEBAR_LIST_DIV.createEl("div", { cls: "dn-td-sidebar-tag-div" });
      tagEl.createEl("a", { cls: "tag", text: tag.replace("#", ""), href: tag });
      tagEl.onClickEvent((evt) => {
        this.handleTagActionsTagsDashboard(evt, tag);
      });
      tagEl.createEl("span", { text: files.length.toString(), cls: "dn-tag-count" });
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this._previewComponent.unload();
    if (this.INPUT_SEARCH && this.INPUT_SEARCH.removeEventListener) {
      this.INPUT_SEARCH.removeEventListener("input", (0, import_obsidian7.debounce)(() => this.dnModalSearchVault(this.INPUT_SEARCH.value), 300, true));
    }
    this._th1.removeEventListener("dblclick", () => this.dnAlternateSortColumn("name"));
    this._th2.removeEventListener("dblclick", () => this.dnAlternateSortColumn("ext"));
    this._th3.removeEventListener("dblclick", () => this.dnAlternateSortColumn("path"));
    this._th4.removeEventListener("dblclick", () => this.dnAlternateSortColumn("size"));
    this._th5.removeEventListener("dblclick", () => this.dnAlternateSortColumn("modified"));
    this._SELECT_SORT.removeEventListener("change", () => {
      this.dnSortColumnWithSelect();
    });
    this.TAGS_INPUT_SEARCH.removeEventListener("input", (0, import_obsidian7.debounce)(() => this.dnTDSearchTags(this.TAGS_INPUT_SEARCH.value), 300, true));
    this._hoverDiv.removeEventListener("mousemove", (evt) => this.dnHoverDragOnMouseMove(evt));
    this._hoverDiv.removeEventListener("mouseup", (evt) => this.dnHoverDragOnMouseUp(evt));
    this._hoverDiv.removeEventListener("click", (evt) => {
      evt.stopPropagation();
      evt.stopImmediatePropagation();
    });
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();
    }
    this.dnSaveStateOnClose();
  }
};

// src/modals/dnsavesearchmodal.ts
var import_obsidian9 = require("obsidian");

// src/utils/helper.ts
function sanitizeInput(txt) {
  return txt.replace(/<[^>]*>/g, "").replace(/&nbsp;/g, " ").replace(/[\u2000-\u200F\u2028-\u202F\u2060-\u206F]/g, "").trim();
}

// src/modals/dnsavesearchmodal.ts
var DNSaveSearchModal = class extends import_obsidian9.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("div", { text: "Save search", cls: "setting-item setting-item-heading dn-modal-heading" });
    let current_search = this.plugin.DN_MODAL.INPUT_SEARCH.value;
    const divSaveSearchQuery = contentEl.createEl("div", { cls: "dn-save-search-row" });
    const divSaveSearchQueryInput = divSaveSearchQuery.createEl("div", { cls: "dn-save-search-value dn-save-search-query" });
    const currentSearchInput = divSaveSearchQueryInput.createEl("input", {
      type: "text",
      placeholder: "Enter your search..."
    });
    currentSearchInput.value = this.plugin.DN_MODAL.INPUT_SEARCH.value;
    contentEl.createEl("br");
    const divSaveDescription = contentEl.createEl("div", { cls: "dn-save-search-row" });
    const divSaveDescriptionInput = divSaveDescription.createEl("div", { cls: "dn-save-search-value dn-save-search-description" });
    const descriptionInput = divSaveDescriptionInput.createEl("input", {
      type: "text",
      placeholder: "Description... (optional)"
    });
    const divBottom = contentEl.createEl("div", { cls: "dn-save-button-container" });
    const btnSaveSearch = divBottom.createEl("button", { text: "Save", cls: "mod-cta" });
    const btnCancel = divBottom.createEl("button", { text: "Cancel" });
    currentSearchInput.addEventListener("input", (0, import_obsidian9.debounce)(() => {
      current_search = currentSearchInput.value;
      this.plugin.DN_MODAL.INPUT_SEARCH.value = current_search;
      this.plugin.DN_MODAL.dnModalSearchVault(current_search);
    }, 300, true));
    btnSaveSearch.onclick = async () => {
      const sanitizedDescription = sanitizeInput(descriptionInput.value);
      const query = current_search;
      if (!query) {
        new import_obsidian9.Notice("Please enter a search.");
        return;
      }
      if (!this.plugin.settings.saved_searches) {
        this.plugin.settings.saved_searches = [];
      }
      let save_id = Date.now();
      while (this.plugin.settings.saved_searches.some((item) => item.id === save_id)) {
        save_id = Date.now();
      }
      const newSavedSearch = {
        id: save_id,
        query,
        description: sanitizedDescription
      };
      this.plugin.settings.saved_searches.push(newSavedSearch);
      await this.plugin.saveSettings();
      new import_obsidian9.Notice("Search saved successfully!");
      this.close();
    };
    btnCancel.onclick = () => {
      this.close();
    };
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/modals/dnsavedsearchesmodal.ts
var import_obsidian11 = require("obsidian");

// src/modals/dnconfirmmodal.ts
var import_obsidian10 = require("obsidian");
var DNConfirmModal = class extends import_obsidian10.Modal {
  constructor(app, title, message, btnText, btnCls = "mod-cta") {
    super(app);
    this.title = title;
    this.message = message;
    this.btnText = btnText;
    this.btnCls = btnCls;
    this.promise = new Promise((resolve) => {
      this.resolve = resolve;
    });
  }
  /**
   * Returns the promise that will resolve with the user's decision (true for confirm, false for cancel).
   */
  get resultPromise() {
    return this.promise;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("div", { text: this.title, cls: "setting-item setting-item-heading dn-modal-heading" });
    contentEl.createEl("p", { text: this.message, cls: "dn-confirm-message" });
    const btnContainer = contentEl.createEl("div", { cls: "dn-confirm-button-container" });
    const btnConfirm = btnContainer.createEl("button", { text: this.btnText, cls: this.btnCls });
    btnConfirm.onclick = () => {
      this.resolve(true);
      this.close();
    };
    const btnCancel = btnContainer.createEl("button", { text: "Cancel", cls: "mod-cancel" });
    btnCancel.onclick = () => {
      this.resolve(false);
      this.close();
    };
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    if (this.resolve) {
      this.resolve(false);
    }
  }
};

// src/modals/dnsavedsearchesmodal.ts
var DNSavedSearchesModal = class extends import_obsidian11.Modal {
  constructor(app, plugin) {
    super(app);
    this.textToFilter = "";
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("div", { text: "Saved searches", cls: "setting-item setting-item-heading dn-modal-heading" });
    const filterDiv = contentEl.createEl("div", { cls: "dn-filter-container" });
    this._INPUT_FILTER = filterDiv.createEl("input", {
      type: "text",
      placeholder: "Filter saved searches...",
      cls: "dn-filter-input"
    });
    this._INPUT_FILTER.spellcheck = false;
    this.CLEAR_INPUT_FILTER = filterDiv.createEl("div", { cls: "search-input-clear-button" });
    this.CLEAR_INPUT_FILTER.setAttribute("aria-label", "Clear search");
    this.CLEAR_INPUT_FILTER.addEventListener("click", () => {
      this._INPUT_FILTER.value = "";
      this.textToFilter = "";
      this.renderSavedSearches();
    });
    this._INPUT_FILTER.value = this.textToFilter;
    this._INPUT_FILTER.addEventListener("input", (0, import_obsidian11.debounce)(() => {
      this.textToFilter = this._INPUT_FILTER.value.toLowerCase();
      this.renderSavedSearches();
    }, 300, true));
    this.savedSearchContainer = contentEl.createEl("div", { cls: "dn-saved-search-list" });
    this.renderSavedSearches();
    const divBtnClose = contentEl.createEl("div", { cls: "dn-div-modal-bottom" });
    const btnClose = divBtnClose.createEl("button", { text: "Close", cls: "dn-btn-properties-close" });
    btnClose.onclick = () => this.close();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  renderSavedSearches() {
    this.savedSearchContainer.empty();
    if (this._INPUT_FILTER.value === "") {
      this.CLEAR_INPUT_FILTER.style.display = "none";
    } else {
      this.CLEAR_INPUT_FILTER.style.display = "flex";
    }
    if (!this.plugin.settings.saved_searches) {
      this.plugin.settings.saved_searches = [];
    }
    const filteredSearches = this.plugin.settings.saved_searches.filter((item) => {
      if (this.textToFilter === "") {
        return true;
      }
      return item.query.toLowerCase().includes(this.textToFilter) || item.description.toLowerCase().includes(this.textToFilter);
    });
    if (filteredSearches.length === 0) {
      const message = this.textToFilter === "" ? "No saved searches." : "No searches match your filter.";
      this.savedSearchContainer.createEl("p", { text: message, cls: "dn-no-searches-message" });
      return;
    }
    filteredSearches.forEach((item) => {
      this.renderSearchEntry(item);
    });
  }
  /**
   * Renders a saved search entry.
   * @param item The DNSaveSearchItem object to render.
   */
  renderSearchEntry(item) {
    const divSearchItem = this.savedSearchContainer.createEl("div", { cls: "dn-saved-search-item" });
    divSearchItem.createEl("div", { text: item.query, cls: "dn-saved-search-query" });
    divSearchItem.createEl("div", { text: item.description, cls: "dn-saved-search-description" });
    divSearchItem.addEventListener("click", () => {
      if (this.plugin.DN_MODAL && this.plugin.DN_MODAL.INPUT_SEARCH) {
        this.plugin.DN_MODAL.INPUT_SEARCH.value = item.query;
        this.plugin.DN_MODAL.dnModalSearchVault(this.plugin.DN_MODAL.INPUT_SEARCH.value);
      } else {
        new import_obsidian11.Notice("Search input not found.");
      }
    });
    divSearchItem.addEventListener("dblclick", () => {
      if (this.plugin.DN_MODAL && this.plugin.DN_MODAL.INPUT_SEARCH) {
        this.plugin.DN_MODAL.INPUT_SEARCH.value = item.query;
        this.plugin.DN_MODAL.dnModalSearchVault(this.plugin.DN_MODAL.INPUT_SEARCH.value);
        this.close();
      } else {
        new import_obsidian11.Notice("Search input not found.");
      }
    });
    const divActions = divSearchItem.createEl("div", { cls: "dn-saved-search-actions" });
    const btnDeleteSearch = divActions.createEl("button", { cls: "dn-action-button dn-delete-button" });
    btnDeleteSearch.setAttribute("aria-label", "Delete search");
    btnDeleteSearch.onclick = async (evt) => {
      evt.stopPropagation();
      const confirmModal = new DNConfirmModal(this.app, "Delete search", "Are you sure you want to delete this saved search?", "Delete", "mod-warning");
      confirmModal.open();
      const confirmed = await confirmModal.resultPromise;
      if (confirmed) {
        const initialLength = this.plugin.settings.saved_searches.length;
        this.plugin.settings.saved_searches = this.plugin.settings.saved_searches.filter(
          (savedItem) => savedItem.id !== item.id
        );
        if (this.plugin.settings.saved_searches.length < initialLength) {
          await this.plugin.saveSettings();
          new import_obsidian11.Notice("Saved search deleted.");
          this.renderSavedSearches();
        } else {
          new import_obsidian11.Notice("Error: Could not find search to delete.");
        }
      }
    };
  }
};

// src/modals/dninfomodal.ts
var import_obsidian12 = require("obsidian");
var DNInfoModal = class extends import_obsidian12.Modal {
  constructor(app) {
    super(app);
    this._markdownContent = `
### Dashboard navigator quick reference

The **Dashboard navigator** search allows you to quickly access and filter specific files within your vault. Quickly find notes, images, canvases, audios, videos, PDFs, and more with simple commands.

#### Basic commands

- \`@notes\`: Lists all **notes**.
- \`@images\`: Lists all **images**.
- \`@canvas\` or \`@canvases\`: Lists all **canvases**.
- \`@audio\` or \`@audios\`: Lists all **audio** files.
- \`@video\` or \`@videos\`: Lists all **video** files.
- \`@pdf\` or \`@pdfs\`: Lists all **PDF** files.
- \`@other\`: Lists all **other** file types.
- \`@bases\`: Lists all **.base** files.
- \`@bookmarks\`: Lists all **bookmarked** files.

#### Advanced filtering with search terms

You can combine the basic commands with search terms to narrow down your results:

* \`@notes #tag1\`: Lists **notes** with the tag \`#tag1\`.
* \`@notes desired_word #tag2\`: Lists **notes** with \`desired_word\` and \`#tag2\`.

#### Search filters shorthands

- \`@n\` = \`@notes\`
- \`@i\` = \`@images\`
- \`@c\` = \`@canvas\` or \`@canvases\`
- \`@a\` = \`@audio\` or \`@audios\`
- \`@v\` = \`@video\` or \`@videos\`
- \`@p\` = \`@pdf\` or \`@pdfs\`
- \`@o\` = \`@other\`
- \`@bb\` = \`@bases\`
- \`@bm\` = \`@bookmarks\`

#### Date filters and shorthands

For quick filtering by date ranges, use the following date filters or the respective shorthands:

**Current day:**
- \`@d\`, \`@day\`, or \`@today\`

**Current day and yesterday:**
- \`@d-1\` or \`@day-1\`

**Current day and past x days:**
- \`@d-2\` to \`@d-7\` or \`@day-2\` to \`@day-7\` (for 2 to 7 days before)

**Current week:**
- \`@w\` or \`@week\`

**Current month and past x months:**
- \`@m\` or \`@month\` (current month)
- \`@m-1\` or \`@month-1\` (current month and previous month)
- \`@m-2\` to \`@m-12\` or \`@month-2\` to \`@month-12\` (current month and 2 to 12 months prior)

**Current year:**
- \`@y\` or \`@year\`

Example:

To filter for data from the current month and the previous month, you would use \`@m-1\`.

#### Combining search terms, file types and date filters

You can combine search terms, file types (one per search) and date filters for more precise results:

- \`@notes #tag1 @month\`: Lists **notes** with the tag \`tag1\` created/modified this month (*Shorthand*: \`@n #tag1 @m\`).
- \`@images @week\`: Lists **images** added this week (*Shorthand*: \`@i @w\`).

#### Quoted search

- **Specific quoted search**: Search for specific sentences in frontmatter metadata or for specific filename using double or single quotes. For example, \`"this is the description of a note"\`.

#### Additional tips

* **Case sensitivity:** Search terms are **case-insensitive**.

* **Multiple commands:** You can use **multiple commands in a single query**, separated by spaces.

#### Excluding results

To exclude specific content from your search results, you can use the \`!\` exclamation point followed by the text, tag or folder you want to exclude. This will remove any items that match the exclusion term.

Example:

- \`@notes #work #pending !#urgent\`: This will list **all notes** tagged with \`#work\` and \`#pending\` except those tagged with \`#urgent\`.

#### Combining exclusions with other filters

You can combine exclusions with other filters, such as tags and date, to further refine your search:

- \`@notes #meeting !#international @month\`: This will list all notes tagged with \`#meeting\` that were created or modified this month, **excluding** those tagged with \`#international\`.

- To find all notes tagged \`#meeting\` created/modified in the current month: \`@notes #meeting @month\`.

By effectively using exclusions, you can tailor your searches to your specific needs and quickly find the information you're looking for.

#### Frontmatter metadata search
    
To search for specific frontmatter metadata, use the following syntax:

**1. Search by property or value:**

- Property match (all notes with this property): \`'name_of_the_property:'\`

Example: \`'task:'\` or \`'created:'\`

- Search for the value in one metadata property: \`'task:' value\` or \`'task:' 'This is a sentence to match'\`. The sentence to match can be in single or double quotes

Example: \`'task:' 'create pdf'\`

**2. Search by property and value:**

- Exact match: \`'name_of_the_property: value'\`

Example: \`'topic: javascript'\`

**Tips:**

- Use single quotes (\`'\`) to enclose when searching for specific metadata.

- You can use the context menu (navigator view or dashboard view to open the **Frontmatter** or **File properties** modal). Click on the desired frontmatter metadata to quickly search for an exact match within your notes.

#### Bookmarks

New **bookmarks** command (Navigator view - search): \`@bookmarks\` or \`@bm\` as its shorthand. This command will **list all bookmarked files** in Navigator view, so you can sort them by file name, extension, folder, date, search for tags and frontmatter.

- You can search for the file categories using the additional \`@bookmarks\`or \`@bm\` filter to identify which ones are bookmarked, e.g. \`@notes @bm\` (notes that are bookmarked) or \`@images @bm\`(images in your bookmarks).

#### Tag actions

You can quickly filter your search results by interacting with **tags** directly within the **Navigator view**, **File Properties modal**, or **Tags modal**. These actions let you include or exclude tags from your current search query.

**\`Shift + left-click\`: Toggle tag inclusion**

1. A \`Shift + left-click\` on a tag toggles between these states:

* **Add tag:** This adds the tag to your search query. You'll **only see results that have this tag.** (e.g., \`#tag\`)
* **Remove tag:** This removes the tag from your search query. The tag will **no longer filter your results**.

**\`Ctrl + left-click\`: Toggle tag exclusion command**

2. A **Ctrl + left-click** on a tag toggles between these states, specifically managing an *exclusion command*:

* **Add exclusion command:** This adds a command to your search query to **exclude** the tag. You'll **only see results that *do NOT* have this tag.** (e.g., \`!#tag\`)
* **Remove exclusion command:** This removes the exclusion command for that tag from your search query. The tag will **no longer filter your results by exclusion**.

### Sort files

- You can sort the files by double clicking on the table header and also by using the dropdown select.

### Display results

You can select 5 types of layouts to display the search results:
- Default
- Row striped
- Column striped
- Bordered
- Cards

### Preview files (hover and context menu)

- **Quick file inspection**: You can choose to preview files using either the **hover preview** or the dedicated context menu item (**Show preview**) in the Dashboard and/or Navigator views. 

- By simply hovering over a file or note while holding down the \`Ctrl\` (Windows/Linux) or \`Command\` (macOS) key, you can instantly preview its content.

- **Context menu**: \`Show preview\` option. This allows you to preview a file or note without the need for a modifier key.

- The **preview window** displays the file's **name** and **path**. You will find three buttons on this window:

1. **Open**: Directly opens the file.
2. **Open in new tab**: Opens the file in a new tab.
3. **Open in new window**: Opens the file in a completely new window.


### Drag-and-drop preview window

- **Drag-and-drop positioning**: You have the freedom to move the preview window to any desired location on the screen. The preview window's position is remembered for subsequent previews (till you close the Dashboard navigator window), ensuring consistency and reducing the need for constant readjustment.

- **Default position**: If you close and reopen the Dashboard navigator window, the preview will automatically return to its default position.

### Context menu

- Right-click the mouse button on the desired file link or table result to open the context menu. You can open the note in various ways (same tab, new tab, new window and also show its properties and metadata). You can also open the note by **double clicking** on the desired result.

### Navigator view: Hide columns

The column-hiding feature gives you the flexibility to customize the **navigator view** to suit your specific preferences and workflow. By **hiding unnecessary columns** you can create a cleaner, more focused view that highlights the information most relevant to you.

You can hide the following columns:
- **Ext**: Shows the file extension.
- **Path**: Shows the location of the file within your vault structure.
- **Size**: Displays the file size.
- **Date**: Indicates the modification date of the file.
- **Tags**: Lists the tags associated with the note, making it easier to categorize and search for notes.
- **Frontmatter**: Lists the frontmatter/metadata associated with the note.
- **BL (backlinks)**: The total number of notes that link to this file.
- **OL (outgoing links)**: The total number of links from this note to other files.

### Tags dashboard view

- **Advanced tag(s) search**: This feature uses secondary tags as cross-references to help you navigate your notes like a dynamic map. By revealing which tags are used together, you can discover hidden associations and see how different ideas and topics are implicitly connected in your vault.

- The tags dashboard's initial state shows a list of your most recently created or modified notes along with their corresponding tags. This gives you a quick overview of your recent activity.

- The \`@tags\` command (top search bar) to search directly in **Tags** dashboard view:

  - **Beginning of the query**: When you start a search with \`@tags\`, it acts as a shortcut. It immediately switches your view to the Tags dashboard and focuses the cursor in the Tags dashboard's search bar, allowing you to start a new tag-focused search right away.

  - **End of the query**: When you place \`@tags\` at the end of a tag(s) search (e.g., \`#tag1 #tag2 @tags\`), it opens the Tags dashboard and shows you all the secondary tags that are used in conjunction with the tag(s) you've already searched for. This helps you find related topics and discover connections between your notes.

- You can also save the tags search using \`@tags\` with a description (saved searches window). When clicking on the saved search option it will open the saved query directly in **Tags** dashboard view.

#### **Tags dashboard commands**

These commands work on the tags displayed in the **recent notes & tags** section, the **secondary tags** displayed in the main **Tags** dashboard, and within the tags list in the **tags sidebar**.

  - \`Left-click\`: Change the selected secondary tag into a primary tag, making it the main focus of your view.

  - \`Shift + click\`: Add this tag to your current search using an AND condition. For example, if your search is \`#article\`, holding \`Shift\` and \`clicking\` on \`#status\` will change your search to \`#article #status\`(notes with tags **#article** AND **#status**).

  - \`Ctrl + click\`: Exclude this clicked secondary tag. This is useful for filtering out results that contain a specific tag.

  - \`Ctrl + middle-click\`: Quickly clear your tag search and start fresh. This removes all tags from your search query, allowing you to reset your view with a single click.

### Excluded file extensions

- Open **plugin settings** and select the file extensions that you don't want to display (extensions separated by commas).

- Enter file extensions: In the provided text field, list the file extensions you want to exclude, separated by commas. For example: \`txt, docx, js\`.

### Excluded folders

- Open **plugin settings** and select the file extensions that you don't want to display (folder paths separated by commas).

- Enter folder paths: In the provided space, list the folder names or paths to the folders(subfolders) you want to exclude, separating them with commas. For example: \`folder1/subfolder, source_files, folder2\`.

### Colored files

- Select custom colors for files in the dashboard and navigator views. 
- These colors will be reflected in the piechart graph, making it easier to identify and track different file types. To activate this feature, go to **plugin settings** and **toggle colored files**.

### Colored tags support

- If the theme being used supports colored tags or if you are using custom CSS snippet to color tags, the **tags** column and **file properties** window will show colored tags accordingly.

`;
    this._mdComponent = new import_obsidian12.Component();
  }
  onOpen() {
    const { contentEl } = this;
    const markdownContainer = contentEl.createEl("div", { cls: "dn-info-modal" });
    import_obsidian12.MarkdownRenderer.render(
      this.app,
      this._markdownContent,
      markdownContainer,
      this.app.vault.configDir,
      this._mdComponent
    );
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/modals/dnquickdisplayoptionsmodal.ts
var import_obsidian13 = require("obsidian");
var DNQuickDisplayOptionsModal = class extends import_obsidian13.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("div", { text: "Navigator view: Quick display options", cls: "setting-item setting-item-heading dn-modal-heading" });
    contentEl.createEl("div", { text: "Hidden columns", cls: "setting-item setting-item-heading" });
    new import_obsidian13.Setting(contentEl).setName("Hide: Ext").addToggle((toggle) => {
      this.toggleHideExtColumn = toggle;
      toggle.setValue(this.plugin.settings.hide_ext).onChange(async (val) => {
        this.plugin.settings.hide_ext = val;
        this.plugin.dnUpdateHideColumn("ext", val);
        await this.plugin.saveSettings();
        await this.plugin.DN_MODAL.dnRedrawResultsTable();
      });
    });
    new import_obsidian13.Setting(contentEl).setName("Hide: Path").addToggle((toggle) => {
      this.toggleHidePathColumn = toggle;
      toggle.setValue(this.plugin.settings.hide_path).onChange(async (val) => {
        this.plugin.settings.hide_path = val;
        this.plugin.dnUpdateHideColumn("path", val);
        await this.plugin.saveSettings();
        await this.plugin.DN_MODAL.dnRedrawResultsTable();
      });
    });
    new import_obsidian13.Setting(contentEl).setName("Hide: Size").addToggle((toggle) => {
      this.toggleHideSizeColumn = toggle;
      toggle.setValue(this.plugin.settings.hide_size).onChange(async (val) => {
        this.plugin.settings.hide_size = val;
        this.plugin.dnUpdateHideColumn("size", val);
        await this.plugin.saveSettings();
        await this.plugin.DN_MODAL.dnRedrawResultsTable();
      });
    });
    new import_obsidian13.Setting(contentEl).setName("Hide: Date").addToggle((toggle) => {
      this.toggleHideDateColumn = toggle;
      toggle.setValue(this.plugin.settings.hide_date).onChange(async (val) => {
        this.plugin.settings.hide_date = val;
        this.plugin.dnUpdateHideColumn("date", val);
        await this.plugin.saveSettings();
        await this.plugin.DN_MODAL.dnRedrawResultsTable();
      });
    });
    new import_obsidian13.Setting(contentEl).setName("Hide: Tags").addToggle((toggle) => {
      this.toggleHideTagsColumn = toggle;
      toggle.setValue(this.plugin.settings.hide_tags).onChange(async (val) => {
        this.plugin.settings.hide_tags = val;
        this.plugin.dnUpdateHideColumn("tags", val);
        await this.plugin.saveSettings();
        await this.plugin.DN_MODAL.dnRedrawResultsTable();
      });
    });
    new import_obsidian13.Setting(contentEl).setName("Hide: Frontmatter").addToggle((toggle) => {
      this.toggleHideFrontmatterColumn = toggle;
      toggle.setValue(this.plugin.settings.hide_frontmatter).onChange(async (val) => {
        this.plugin.settings.hide_frontmatter = val;
        this.plugin.dnUpdateHideColumn("frontmatter", val);
        await this.plugin.saveSettings();
        await this.plugin.DN_MODAL.dnRedrawResultsTable();
      });
    });
    new import_obsidian13.Setting(contentEl).setName("Hide: BL (backlinks)").addToggle((toggle) => {
      this.toggleHideBLColumn = toggle;
      toggle.setValue(this.plugin.settings.hide_backlinks).onChange(async (val) => {
        this.plugin.settings.hide_backlinks = val;
        this.plugin.dnUpdateHideColumn("backlinks", val);
        await this.plugin.saveSettings();
        await this.plugin.DN_MODAL.dnRedrawResultsTable();
      });
    });
    new import_obsidian13.Setting(contentEl).setName("Hide: OL (outgoing links)").addToggle((toggle) => {
      this.toggleHideOLColumn = toggle;
      toggle.setValue(this.plugin.settings.hide_outgoing).onChange(async (val) => {
        this.plugin.settings.hide_outgoing = val;
        this.plugin.dnUpdateHideColumn("outgoing", val);
        await this.plugin.saveSettings();
        await this.plugin.DN_MODAL.dnRedrawResultsTable();
      });
    });
    contentEl.createEl("div", { text: "Activate toggles to hide columns. Deactivate to show.", cls: "dn-table-column-description" });
    contentEl.createEl("br");
    contentEl.createEl("div", { text: "Image thumbnails", cls: "setting-item setting-item-heading" });
    new import_obsidian13.Setting(contentEl).setName("Show image thumbnails").setDesc("Activate to show image thumbnails. Deactivate to show image icons.").addToggle((toggle) => {
      this.toggleImageThumbnail = toggle;
      toggle.setValue(this.plugin.settings.image_thumbnail).onChange(async (val) => {
        this.plugin.settings.image_thumbnail = val;
        this.plugin.DN_MODAL.image_thumbnail = this.plugin.settings.image_thumbnail;
        await this.plugin.saveSettings();
        await this.plugin.DN_MODAL.dnRedrawResultsTable();
      });
    });
    new import_obsidian13.Setting(contentEl).setName("Image thumbnails size").setDesc("Adjust image thumbnails size in pixels.").addSlider((sli) => {
      this.sliderImageThumbnail = sli;
      let slider_val;
      if (this.plugin.settings.thumbnail_size) {
        slider_val = this.plugin.settings.thumbnail_size;
      } else {
        slider_val = 82;
      }
      sli.setDynamicTooltip();
      sli.setLimits(50, 500, 1);
      sli.setValue(slider_val);
      sli.onChange((val) => {
        this.plugin.settings.thumbnail_size = val;
        this.plugin.dnSetThumbnailSize(val);
        this.plugin.saveSettings();
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/data/dndatamanager.ts
var import_obsidian14 = require("obsidian");

// src/utils/dnbookmarks.ts
function getBookmarkedFiles(bookmarksJson) {
  const bookmarksPaths = /* @__PURE__ */ new Set();
  const stack = [];
  try {
    const bookmarks = JSON.parse(bookmarksJson);
    if (bookmarks.items) {
      for (let i = bookmarks.items.length - 1; i >= 0; i--) {
        stack.push(bookmarks.items[i]);
      }
    }
    while (stack.length > 0) {
      const currentItem = stack.pop();
      if (!currentItem)
        continue;
      if (currentItem.type === "file" && currentItem.path) {
        bookmarksPaths.add(currentItem.path);
      } else if (currentItem.type === "group" && currentItem.items) {
        for (let i = currentItem.items.length - 1; i >= 0; i--) {
          stack.push(currentItem.items[i]);
        }
      }
    }
  } catch (error) {
    return [];
  }
  return Array.from(bookmarksPaths);
}

// src/data/dndatamanager.ts
var DNDataManager = class {
  constructor() {
    this.dataCache = null;
    this.cacheHash = "";
  }
  async getDataCache(app, excludedExtensions, excludedFolders) {
    const allLoadedAbstractFiles = app.vault.getAllLoadedFiles();
    const currentHash = await this.generateHash(allLoadedAbstractFiles, excludedExtensions, excludedFolders);
    if (this.cacheHash === currentHash && this.dataCache) {
      return this.dataCache;
    } else {
      const newData = await this.generateDataCache(app, allLoadedAbstractFiles, excludedExtensions, excludedFolders);
      this.dataCache = newData;
      this.cacheHash = currentHash;
      return newData;
    }
  }
  async generateDataCache(app, allLoadedAbstractFiles, excludedExtensions, excludedFolders) {
    const data = {
      all_files: [],
      folders: [],
      last_opened: [],
      bookmarks: [],
      filtered_files: [],
      notes: [],
      images: [],
      canvas: [],
      audios: [],
      videos: [],
      pdf: [],
      bases: [],
      other: [],
      tags: /* @__PURE__ */ new Map(),
      tagNames: []
    };
    for (const absF of allLoadedAbstractFiles) {
      if (absF instanceof import_obsidian14.TFile) {
        data.all_files.push(absF);
      } else if (absF instanceof import_obsidian14.TFolder && !absF.isRoot()) {
        data.folders.push(absF);
      }
    }
    data.filtered_files = this.filterFiles(data.all_files, excludedExtensions, excludedFolders);
    this.organizeFiles(data.filtered_files, data);
    data.tags = await this.dnGetAllTagsCount(app, data.all_files);
    data.tagNames = Array.from(data.tags.keys());
    return data;
  }
  filterFiles(files, excludedExtensions, excludedFolders) {
    return files.filter((file) => {
      const isExcludedExtension = excludedExtensions.includes(file.extension.toLowerCase());
      const isExcludedFolder = excludedFolders.some((folder) => file.path.startsWith(folder));
      return !isExcludedExtension && !isExcludedFolder;
    });
  }
  organizeFiles(files, data) {
    const extensions = {
      "md": data.notes,
      // Images
      "avif": data.images,
      "bmp": data.images,
      "gif": data.images,
      "ico": data.images,
      "jpeg": data.images,
      "jpg": data.images,
      "png": data.images,
      "raw": data.images,
      "svg": data.images,
      "tif": data.images,
      "tiff": data.images,
      "webp": data.images,
      // Audio files
      "aac": data.audios,
      "aif": data.audios,
      "aifc": data.audios,
      "aiff": data.audios,
      "flac": data.audios,
      "m4a": data.audios,
      "mp3": data.audios,
      "ogg": data.audios,
      "wav": data.audios,
      "webm": data.audios,
      // Videos
      "avi": data.videos,
      "mov": data.videos,
      "mkv": data.videos,
      "mp4": data.videos,
      // PDF and Canvas
      "pdf": data.pdf,
      "base": data.bases,
      "canvas": data.canvas
    };
    for (const file of files) {
      const ext = file.extension.toLowerCase();
      const targetArr = extensions[ext];
      if (targetArr) {
        targetArr.push(file);
      } else {
        data.other.push(file);
      }
    }
  }
  async generateHash(allAbstractFiles, excludedExtensions, excludedFolders) {
    let stringToHash = "";
    for (const file of allAbstractFiles) {
      if (file instanceof import_obsidian14.TFile && file.stat) {
        stringToHash += `${file.path}|${file.stat.mtime}|`;
      } else {
        stringToHash += `${file.path}|`;
      }
    }
    stringToHash += JSON.stringify(excludedExtensions) + "|";
    stringToHash += JSON.stringify(excludedFolders) + "|";
    const encoder = new TextEncoder();
    const data = encoder.encode(stringToHash);
    const hashBuffer = await crypto.subtle.digest("SHA-256", data);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const hashHex = hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
    return hashHex;
  }
  getLastOpenedFiles(app) {
    const lo_files = [];
    const lastOpenPaths = app.workspace.getLastOpenFiles();
    for (const path of lastOpenPaths) {
      const file = app.vault.getAbstractFileByPath(path);
      if (file instanceof import_obsidian14.TFile) {
        lo_files.push(file);
      }
    }
    return lo_files;
  }
  async getBookmarkedVaultFiles(app, excludedExtensions, excludedFolders) {
    const bookmarkedFiles = [];
    try {
      const bookmarksJsonContent = await app.vault.adapter.read(".obsidian/bookmarks.json");
      const bookmarkPaths = getBookmarkedFiles(bookmarksJsonContent);
      if (Array.isArray(bookmarkPaths)) {
        for (const path of bookmarkPaths) {
          const file = app.vault.getAbstractFileByPath(path);
          if (file instanceof import_obsidian14.TFile) {
            const isExcludedExtension = excludedExtensions.includes(file.extension.toLowerCase());
            const isExcludedFolder = excludedFolders.some((folder) => file.path.startsWith(folder));
            if (!isExcludedExtension && !isExcludedFolder) {
              bookmarkedFiles.push(file);
            }
          }
        }
      }
    } catch (error) {
      return [];
    }
    return bookmarkedFiles;
  }
  async dnGetAllTagsCount(app, files) {
    var _a;
    const tagFiles = /* @__PURE__ */ new Map();
    for (const file of files) {
      const metadata = app.metadataCache.getFileCache(file);
      const fileTags = /* @__PURE__ */ new Set();
      if (metadata == null ? void 0 : metadata.tags) {
        for (const tag of metadata.tags) {
          fileTags.add(tag.tag);
        }
      }
      if ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.tags) {
        const fmTags = metadata.frontmatter.tags;
        if (typeof fmTags === "string") {
          fileTags.add(fmTags.trim());
        } else if (Array.isArray(fmTags)) {
          for (const tag of fmTags) {
            if (typeof tag === "string") {
              fileTags.add(tag.trim());
            }
          }
        }
      }
      for (const tag of fileTags) {
        let normalizedTag = tag.startsWith("#") ? tag : `#${tag}`;
        normalizedTag = normalizedTag.toLowerCase();
        const currentFiles = tagFiles.get(normalizedTag) || [];
        currentFiles.push(file);
        tagFiles.set(normalizedTag, currentFiles);
      }
    }
    const sortedEntries = Array.from(tagFiles.entries()).sort((a, b) => {
      const tagNameA = a[0];
      const tagNameB = b[0];
      const lowerCaseTagNameA = tagNameA.toLowerCase();
      const lowerCaseTagNameB = tagNameB.toLowerCase();
      return lowerCaseTagNameA.localeCompare(lowerCaseTagNameB);
    });
    const sortedMap = new Map(sortedEntries);
    return sortedMap;
  }
  dnGetAllTagsNames() {
    if (!this.dataCache || !this.dataCache.tags) {
      return [];
    }
    return Array.from(this.dataCache.tags.keys());
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  default_view: 1,
  font_size: 16,
  selected_table_layout: "dn-tbl-default",
  date_format: "YYYY-MM-DD HH:mm",
  files_per_page: 20,
  num_recent_files: 5,
  num_bookmarked_files: 10,
  excluded_ext: "",
  excluded_path: "",
  color_notes: "#bf48ff",
  color_images: "#007fff",
  color_canvas: "#ff7f28",
  color_videos: "#d34848",
  color_audios: "#bfbf00",
  color_pdf: "#00a300",
  color_bases: "#00a3a3",
  color_other: "#828282",
  colored_files: false,
  hide_ext: false,
  hide_path: false,
  hide_size: false,
  hide_date: false,
  hide_tags: false,
  hide_frontmatter: false,
  hide_backlinks: false,
  hide_outgoing: false,
  hide_columns: [],
  show_dashboard_piechart: true,
  image_thumbnail: true,
  thumbnail_size: 82,
  primary_tags_results_visible: true,
  tags_sidebar: true,
  tags_sidebar_sorted_by_frequency: false,
  onclose_search: "",
  saved_searches: []
};
var DNPlugin = class extends import_obsidian15.Plugin {
  async onload() {
    await this.loadSettings();
    this._DN_DATA_MANAGER = new DNDataManager();
    const excludedExtensions = this.dnGetExcludedExtensions(this.settings.excluded_ext);
    const excludedFolders = this.dnGetExcludedFolders(this.settings.excluded_path);
    this.DN_MODAL = new DNModal(this.app, this, this._DN_DATA_MANAGER);
    this.DN_QUICK_DISPLAY_OPTIONS_MODAL = new DNQuickDisplayOptionsModal(this.app, this);
    this.DN_SAVE_SEARCH_MODAL = new DNSaveSearchModal(this.app, this);
    this.DN_SAVED_SEARCHES_MODAL = new DNSavedSearchesModal(this.app, this);
    this.DN_INFO_MODAL = new DNInfoModal(this.app);
    this.DN_MODAL.default_view = this.settings.default_view;
    this.DN_MODAL.date_format = this.settings.date_format;
    this.DN_MODAL.num_recent_files = this.settings.num_recent_files;
    this.DN_MODAL.num_bookmarked_files = this.settings.num_bookmarked_files;
    this.DN_MODAL.files_per_page = this.settings.files_per_page;
    this.DN_MODAL.selected_table_layout = this.settings.selected_table_layout;
    this.DN_MODAL.excluded_extensions = excludedExtensions;
    this.DN_MODAL.excluded_folders = excludedFolders;
    this.dnSetFontSize(this.settings.font_size);
    this.dnSetThumbnailSize(this.settings.thumbnail_size);
    this.DN_MODAL.colored_files = this.settings.colored_files;
    this.DN_MODAL.color_notes = this.settings.color_notes;
    this.DN_MODAL.color_canvas = this.settings.color_canvas;
    this.DN_MODAL.color_images = this.settings.color_images;
    this.DN_MODAL.color_videos = this.settings.color_videos;
    this.DN_MODAL.color_audios = this.settings.color_audios;
    this.DN_MODAL.color_pdf = this.settings.color_pdf;
    this.DN_MODAL.color_other = this.settings.color_other;
    this.DN_MODAL.color_bases = this.settings.color_bases;
    this.DN_MODAL.hide_columns = this.dnSetHiddenColumns(this.settings.hide_columns);
    this.DN_MODAL.image_thumbnail = this.settings.image_thumbnail;
    this.DN_MODAL.show_dashboard_piechart = this.settings.show_dashboard_piechart;
    this.DN_MODAL.primary_tags_results_visible = this.settings.primary_tags_results_visible;
    this.DN_MODAL.tags_sidebar = this.settings.tags_sidebar;
    this.DN_MODAL.tags_sidebar_sorted_by_frequency = this.settings.tags_sidebar_sorted_by_frequency;
    this.addRibbonIcon("gauge", "Open dashboard navigator", (evt) => {
      this.DN_MODAL.default_view = this.settings.default_view;
      this.DN_MODAL.open();
    });
    this.addCommand({
      id: "dashboard",
      name: "Open dashboard",
      callback: () => {
        this.DN_MODAL.default_view = 1;
        this.DN_MODAL.open();
      }
    });
    this.addCommand({
      id: "navigator",
      name: "Open navigator",
      callback: () => {
        this.DN_MODAL.default_view = 2;
        this.DN_MODAL.open();
      }
    });
    this.addCommand({
      id: "tags",
      name: "Open tags",
      callback: () => {
        this.DN_MODAL.default_view = 3;
        this.DN_MODAL.open();
      }
    });
    this.addSettingTab(new DNSettingTab(this.app, this));
    this.app.workspace.onLayoutReady(async () => {
      await this._DN_DATA_MANAGER.getDataCache(this.app, excludedExtensions, excludedFolders);
    });
  }
  dnSetThumbnailSize(val) {
    if (val >= 50 || val <= 500) {
      document.body.style.setProperty("--dn-thumbnail-size", val.toString() + "px");
    } else {
      document.body.style.setProperty("--dn-thumbnail-size", "82px");
    }
  }
  dnSetFontSize(val) {
    if (val >= 12 || val <= 24) {
      document.body.style.setProperty("--dn-font-size", val.toString() + "px");
    } else {
      document.body.style.setProperty("--dn-font-size", "16px");
    }
  }
  dnSetHiddenColumns(arrCols) {
    const allowedCols = ["ext", "path", "size", "date", "tags", "frontmatter", "backlinks", "outgoing"];
    arrCols = arrCols.filter((col) => allowedCols.includes(col));
    if (arrCols.length <= 8 && arrCols.some((col) => ["ext", "path", "size", "date", "tags", "frontmatter", "backlinks", "outgoing"].includes(col))) {
      return arrCols;
    } else {
      this.settings.hide_columns = [];
      this.settings.hide_ext = false;
      this.settings.hide_path = false;
      this.settings.hide_size = false;
      this.settings.hide_date = false;
      this.settings.hide_tags = false;
      this.settings.hide_frontmatter = false;
      this.settings.hide_backlinks = false;
      this.settings.hide_outgoing = false;
      this.saveSettings();
      return [];
    }
  }
  dnUpdateHideColumn(col, val) {
    const allowedCols = ["ext", "path", "size", "date", "tags", "frontmatter", "backlinks", "outgoing"];
    if (allowedCols.includes(col) && val === true) {
      if (!this.settings.hide_columns.includes(col)) {
        this.settings.hide_columns.push(col);
        this.DN_MODAL.hide_columns = this.settings.hide_columns;
      }
    } else {
      this.settings.hide_columns = this.settings.hide_columns.filter((c) => c !== col);
      this.DN_MODAL.hide_columns = this.settings.hide_columns;
    }
  }
  dnGetExcludedFolders(foldersString) {
    if (foldersString === "") {
      return [];
    }
    const folders = foldersString.split(",").map((folder) => folder.trim());
    return folders.map((folder) => folder.replace(/^\/|\/$|\.\./g, "")).filter((folder) => folder !== "");
  }
  dnGetExcludedExtensions(excluded_ext) {
    if (excluded_ext === "") {
      return [];
    }
    return excluded_ext.split(",").map((extension) => extension.trim());
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
