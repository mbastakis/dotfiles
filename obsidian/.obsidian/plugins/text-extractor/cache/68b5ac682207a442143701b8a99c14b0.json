{"path":"Extras/Images/Pasted image 20250118114734 1.png","text":"Table 10-1. Application and infrastructure code workflows Use version control . git clone . git clone « One repo per app « live and modules repos « Use branches « Don't use branches Run the code localy « Run on localhost « Run in a sandbox environment « ruby web-server.rb « terraform apply « ruby web-server-test.rb « go test Make cnde changes « Change the code « Change the code « ruby web-server.rb « terraform apply « ruby web-server-test.rb « go test « Use test stages f:z;\"v:[ changes for « Submit a pull request « Submit a pull request « Enforce coding guidelines « Enforce coding guidelines Run automated tests « Tests run on Cl server « Tests run on I server « Unit tests « Unit tests « Integration tests « Integration tests « End-to-end tests « End-to-end tests - Static analysis « Static analysis « terraform plan Merge and release . git tag . git tag - (reate versioned, immutable « Use repo with tag as versioned, immutable artifact artifact Deploy « Deploy with Terraform, « Deploy with Terraform, Atlantis, Terraform Cloud, orchestration tool (e.g., Terraform Enterprise, Terragrunt, scripts Kubernetes, Mesos), scripts + Limited deployment strategies (make sure to handle « Many deployment strategies: errors: retries, errored. tfstate!) rolling deployment, blue-green, « Run deployment on a Cl server canary « Give (I server temporary credentials solely to invoke + Run deployment on a (I server a separate, locked-down worker that has admin « Give (I server limited permissions permissions « Promote immutable, versioned « Promote immutable, versioned artifacts across artifacts across environments environments « Once a pull request is merged, « Once a pull request is merged, go through an approval deploy automatically workflow where someone checks the plan output one last time, and then deploy automatically","libVersion":"0.5.0","langs":"eng"}