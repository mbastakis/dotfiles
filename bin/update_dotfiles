#!/usr/bin/env bash
#
# Comprehensive dotfiles update script
#
# Author: mbastakis
# Last updated: $(date '+%Y-%m-%d')
#

set -euo pipefail
IFS=$'\n\t'

# Get script directory and source utils
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOTFILES_ROOT="$(dirname "$SCRIPT_DIR")"
source "$DOTFILES_ROOT/scripts/utils.sh"

# Initialize utils
init_utils

# Main function
main() {
    local components=()
    local git_pull=true
    local stow_packages=true
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -c|--components)
                IFS=',' read -ra components <<< "$2"
                shift 2
                ;;
            --no-git)
                git_pull=false
                shift
                ;;
            --no-stow)
                stow_packages=false
                shift
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -y|--yes)
                FORCE_YES=true
                shift
                ;;
            --dry-run)
                DRY_RUN=true
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Set default components if none specified
    if [ ${#components[@]} -eq 0 ]; then
        components=("git" "stow" "vscode" "homebrew" "zsh")
    fi
    
    log_section "Updating Dotfiles Repository"
    
    # Pull latest changes from git
    if [[ "$git_pull" == "true" ]]; then
        git_pull_updates
    fi
    
    # Update components
    for component in "${components[@]}"; do
        case "$component" in
            "git")
                update_git_component
                ;;
            "stow")
                if [[ "$stow_packages" == "true" ]]; then
                    update_stow_component
                fi
                ;;
            "vscode")
                update_vscode_component
                ;;
            "homebrew"|"brew")
                update_homebrew_component
                ;;
            "zsh"|"zinit")
                update_zsh_component
                ;;
            "obsidian")
                update_obsidian_component
                ;;
            *)
                log_warning "Unknown component: $component"
                ;;
        esac
    done
    
    log_section "Dotfiles Update Complete"
    log_info "All specified components have been updated"
}

# Update git component
update_git_component() {
    log_subsection "Updating Git Configuration"
    
    # Git configurations are managed via stow, so just ensure they're linked
    if command_exists git; then
        log_info "Git configuration is managed via stow"
        log_info "Current git user: $(git config --global user.name 2>/dev/null || echo 'Not set')"
        log_info "Current git email: $(git config --global user.email 2>/dev/null || echo 'Not set')"
    else
        log_warning "Git not installed"
    fi
}

# Update stow component
update_stow_component() {
    log_subsection "Updating Stow Configurations"
    
    if ! command_exists stow; then
        log_warning "GNU Stow not installed, skipping stow update"
        return 1
    fi
    
    # Restow all packages
    stow_all_packages "restow"
}

# Update VS Code component
update_vscode_component() {
    log_subsection "Updating VS Code Configuration"
    
    if ! command_exists code; then
        log_warning "VS Code CLI not found, skipping VS Code update"
        return 1
    fi
    
    # Update extensions list
    sync_vscode_extensions
    
    # Ensure VS Code config is properly linked
    log_info "VS Code configuration symlinks are managed by setup_vscode script"
}

# Update Homebrew component
update_homebrew_component() {
    log_subsection "Updating Homebrew"
    
    if ! command_exists brew; then
        log_warning "Homebrew not installed, skipping Homebrew update"
        return 1
    fi
    
    # Update Homebrew itself and all packages
    update_homebrew
}

# Update ZSH component
update_zsh_component() {
    log_subsection "Updating ZSH and Zinit"
    
    # Check if Zinit is installed
    local zinit_dir="$HOME/.local/share/zinit/zinit.git"
    if [ ! -d "$zinit_dir" ]; then
        log_warning "Zinit not installed, skipping ZSH update"
        return 1
    fi
    
    log_info "Updating Zinit and plugins"
    if [[ "$DRY_RUN" != "true" ]]; then
        # Update Zinit and all plugins
        zsh -i -c '
        source "${HOME}/.local/share/zinit/zinit.git/zinit.zsh" 2>/dev/null
        zinit self-update
        zinit update --all --quiet
        ' 2>/dev/null || log_warning "Failed to update Zinit plugins"
        
        log_success "Zinit and plugins updated"
    else
        log_info "[DRY RUN] Would update Zinit and plugins"
    fi
}

# Update Obsidian component
update_obsidian_component() {
    log_subsection "Updating Obsidian Configuration"
    
    # Obsidian configurations are managed via symlinks
    # Just verify the symlinks are in place
    local obsidian_config="$DOTFILES_ROOT/obsidian/.obsidian"
    
    if [ -d "$obsidian_config" ]; then
        log_info "Obsidian configuration is managed via symlinks"
        log_info "Configuration source: $obsidian_config"
    else
        log_warning "Obsidian configuration directory not found"
    fi
}

# Help function
show_help() {
    cat << EOF
Comprehensive Dotfiles Update Script

Usage: $0 [OPTIONS]

Options:
    -c, --components LIST    Comma-separated list of components to update
                            Available: git, stow, vscode, homebrew, zsh, obsidian
                            Default: git,stow,vscode,homebrew,zsh
    --no-git                Skip git pull operation
    --no-stow               Skip stow restow operation
    -v, --verbose           Enable verbose output
    -y, --yes              Answer yes to all prompts
    --dry-run              Show what would be done without executing
    -h, --help             Show this help message

Examples:
    $0                              # Update all default components
    $0 -c vscode,homebrew          # Update only VS Code and Homebrew
    $0 --no-git                    # Update without pulling git changes
    $0 --dry-run                   # Preview what would be updated
    $0 -v -y                       # Verbose output with auto-yes

Components:
    git        - Git configuration (via stow)
    stow       - Restow all configuration packages
    vscode     - VS Code settings and extensions
    homebrew   - Update Homebrew and packages
    zsh        - Update Zinit and ZSH plugins
    obsidian   - Obsidian configuration (via symlinks)
EOF
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
