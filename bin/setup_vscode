#!/usr/bin/env bash
#
# VS Code dotfiles setup script
#
# Author: mbastakis
# Last updated: $(date '+%Y-%m-%d')
#

set -euo pipefail
IFS=$'\n\t'

# Get script directory and source utils
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOTFILES_ROOT="$(dirname "$SCRIPT_DIR")"
source "$DOTFILES_ROOT/scripts/utils.sh"

# Initialize utils
init_utils

# VS Code configuration paths
get_vscode_user_dir() {
    case "$OSTYPE" in
        darwin*)
            echo "$HOME/Library/Application Support/Code/User"
            ;;
        linux-gnu*)
            echo "$HOME/.config/Code/User"
            ;;
        msys|win32)
            echo "$APPDATA/Code/User"
            ;;
        *)
            die "Unsupported operating system: $OSTYPE"
            ;;
    esac
}

VSCODE_USER_DIR="$(get_vscode_user_dir)"
DOTFILES_VSCODE_DIR="$DOTFILES_ROOT/vscode"

# Main function
main() {
    local action=""
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            setup|link)
                action="setup"
                shift
                ;;
            sync)
                action="sync"
                shift
                ;;
            extensions)
                action="extensions"
                shift
                break  # Let extensions subcommand handle remaining args
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -y|--yes)
                FORCE_YES=true
                shift
                ;;
            --dry-run)
                DRY_RUN=true
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Default action
    if [ -z "$action" ]; then
        action="setup"
    fi
    
    log_section "VS Code Configuration Management"
    
    # Validate VS Code directory exists
    if [ ! -d "$DOTFILES_VSCODE_DIR" ]; then
        die "Dotfiles VS Code directory not found: $DOTFILES_VSCODE_DIR"
    fi
    
    # Execute action
    case "$action" in
        "setup")
            setup_vscode_dotfiles
            ;;
        "sync")
            sync_from_vscode
            setup_vscode_dotfiles
            ;;
        "extensions")
            handle_extensions "$@"
            ;;
        *)
            log_error "Unknown action: $action"
            exit 1
            ;;
    esac
    
    log_section "VS Code Configuration Complete"
}

# Setup VS Code dotfiles
setup_vscode_dotfiles() {
    log_subsection "Setting up VS Code dotfiles"
    
    # Create symlinks for configuration files
    create_vscode_symlink "settings.json"
    create_vscode_symlink "keybindings.json"
    
    # Handle snippets directory if it exists
    if [ -d "$DOTFILES_VSCODE_DIR/snippets" ]; then
        create_vscode_symlink "snippets" "directory"
    fi
    
    # Setup TUI Manager extension
    setup_tui_manager_extension
    
    log_success "VS Code dotfiles setup completed"
}

# Create VS Code symlink
create_vscode_symlink() {
    local file="$1"
    local type="${2:-file}"
    local source="$DOTFILES_VSCODE_DIR/$file"
    local target="$VSCODE_USER_DIR/$file"
    
    log_info "Setting up $file $type"
    
    if [[ "$DRY_RUN" != "true" ]]; then
        # Create VS Code User directory if it doesn't exist
        ensure_dir "$(dirname "$target")"
        
        # Backup existing file if it exists and is not a symlink
        if [ -f "$target" ] && [ ! -L "$target" ]; then
            backup_file "$target"
        fi
        
        # Remove existing file/symlink
        if [ -e "$target" ] || [ -L "$target" ]; then
            rm "$target"
        fi
        
        # Create symlink
        ln -sf "$source" "$target"
        log_success "$file symlink created: $target -> $source"
    else
        log_info "[DRY RUN] Would create symlink: $target -> $source"
    fi
}

# Sync from current VS Code config to dotfiles
sync_from_vscode() {
    log_subsection "Syncing from VS Code to dotfiles"
    
    # Copy current VS Code settings to dotfiles if they exist and are not symlinks
    sync_vscode_file "settings.json"
    sync_vscode_file "keybindings.json"
    
    # Update extensions list
    sync_vscode_extensions
}

# Sync individual VS Code file
sync_vscode_file() {
    local file="$1"
    local source="$VSCODE_USER_DIR/$file"
    local target="$DOTFILES_VSCODE_DIR/$file"
    
    if [ -f "$source" ] && [ ! -L "$source" ]; then
        log_info "Copying $file to dotfiles"
        if [[ "$DRY_RUN" != "true" ]]; then
            cp "$source" "$target"
            log_success "$file copied to dotfiles"
        else
            log_info "[DRY RUN] Would copy $file to dotfiles"
        fi
    fi
}

# Handle extensions subcommand
handle_extensions() {
    local subaction=""
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            install)
                subaction="install"
                shift
                ;;
            update|sync)
                subaction="update"
                shift
                ;;
            list)
                subaction="list"
                shift
                ;;
            *)
                log_error "Unknown extensions subcommand: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    if [ -z "$subaction" ]; then
        log_error "Extensions subcommand required"
        show_help
        exit 1
    fi
    
    case "$subaction" in
        "install")
            install_vscode_extensions
            ;;
        "update")
            sync_vscode_extensions
            ;;
        "list")
            list_vscode_extensions
            ;;
    esac
}

# List VS Code extensions
list_vscode_extensions() {
    local extensions_file="$DOTFILES_VSCODE_DIR/extensions.txt"
    
    if [ -f "$extensions_file" ]; then
        log_subsection "VS Code Extensions in dotfiles"
        cat "$extensions_file"
    else
        log_warning "Extensions file not found: $extensions_file"
    fi
    
    if command_exists code; then
        log_subsection "Currently Installed Extensions"
        code --list-extensions
    else
        log_warning "VS Code CLI not available"
    fi
}

# Help function
show_help() {
    cat << EOF
VS Code Configuration Management Script

Usage: $0 [ACTION] [OPTIONS]

Actions:
    setup, link           Create symlinks from dotfiles to VS Code config (default)
    sync                 Copy current VS Code config to dotfiles, then setup symlinks
    extensions SUBACTION Handle VS Code extensions

Extension Subactions:
    install              Install all extensions from extensions.txt
    update, sync         Update extensions.txt with currently installed extensions
    list                 List extensions in dotfiles and currently installed

Options:
    -v, --verbose        Enable verbose output
    -y, --yes           Answer yes to all prompts
    --dry-run           Show what would be done without executing
    -h, --help          Show this help message

Examples:
    $0                           # Setup VS Code dotfiles
    $0 sync                      # Sync current config to dotfiles
    $0 extensions install        # Install extensions from list
    $0 extensions update         # Update extensions list
    $0 --dry-run                 # Preview operations

Paths:
    VS Code config: $VSCODE_USER_DIR
    Dotfiles:       $DOTFILES_VSCODE_DIR
EOF
}

# Setup TUI Manager extension
setup_tui_manager_extension() {
    local extension_dir="$DOTFILES_VSCODE_DIR/extensions/tui-manager"
    local vscode_extensions_dir="$HOME/.vscode/extensions"
    local target_link="$vscode_extensions_dir/tui-manager"
    
    log_info "Setting up TUI Manager extension"
    
    # Check if extension directory exists
    if [ ! -d "$extension_dir" ]; then
        log_error "TUI Manager extension directory not found: $extension_dir"
        return 1
    fi
    
    if [[ "$DRY_RUN" != "true" ]]; then
        # Ensure VS Code extensions directory exists
        ensure_dir "$vscode_extensions_dir"
        
        # Remove existing symlink if it exists
        if [ -L "$target_link" ]; then
            rm "$target_link"
        fi
        
        # Create symlink to install extension
        ln -sf "$extension_dir" "$target_link"
        
        # Compile the extension if TypeScript source exists
        if [ -f "$extension_dir/tsconfig.json" ]; then
            log_info "Compiling TUI Manager extension"
            if command_exists npm; then
                (cd "$extension_dir" && npm run compile 2>/dev/null || log_warning "Failed to compile extension")
            else
                log_warning "npm not available, extension may need manual compilation"
            fi
        fi
        
        log_success "TUI Manager extension installed: $target_link -> $extension_dir"
        log_info "Please reload VS Code for the extension to take effect"
    else
        log_info "[DRY RUN] Would install TUI Manager extension"
    fi
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
