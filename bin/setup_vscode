#!/usr/bin/env bash

# VS Code dotfiles setup script
# This script creates symlinks from VS Code's configuration directory to your dotfiles

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# VS Code configuration paths
if [[ "$OSTYPE" == "darwin"* ]]; then
    VSCODE_USER_DIR="$HOME/Library/Application Support/Code/User"
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    VSCODE_USER_DIR="$HOME/.config/Code/User"
elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "win32" ]]; then
    VSCODE_USER_DIR="$APPDATA/Code/User"
else
    echo -e "${RED}Unsupported operating system${NC}"
    exit 1
fi

# Dotfiles VS Code directory
DOTFILES_VSCODE_DIR="$HOME/dev/dotfiles/vscode"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to backup existing files
backup_file() {
    local file_path="$1"
    if [ -f "$file_path" ] && [ ! -L "$file_path" ]; then
        local backup_path
        backup_path="${file_path}.backup.$(date +%Y%m%d_%H%M%S)"
        print_warning "Backing up existing file: $file_path -> $backup_path"
        cp "$file_path" "$backup_path"
    fi
}

# Function to create symlink
create_symlink() {
    local source="$1"
    local target="$2"
    local description="$3"
    
    print_status "Setting up $description..."
    
    # Create VS Code User directory if it doesn't exist
    mkdir -p "$(dirname "$target")"
    
    # Backup existing file if it exists and is not a symlink
    backup_file "$target"
    
    # Remove existing file/symlink
    if [ -e "$target" ] || [ -L "$target" ]; then
        rm "$target"
    fi
    
    # Create symlink
    ln -sf "$source" "$target"
    print_success "$description symlink created: $target -> $source"
}

# Function to update extensions list
update_extensions_list() {
    print_status "Updating extensions list..."
    if command -v code &> /dev/null; then
        code --list-extensions > "$DOTFILES_VSCODE_DIR/extensions.txt"
        print_success "Extensions list updated"
    else
        print_warning "VS Code CLI not found. Cannot update extensions list."
    fi
}

# Function to install extensions from list
install_extensions() {
    print_status "Installing extensions from list..."
    if [ -f "$DOTFILES_VSCODE_DIR/extensions.txt" ] && command -v code &> /dev/null; then
        while IFS= read -r extension; do
            # Skip empty lines and comments
            if [[ ! -z "$extension" ]] && [[ ! "$extension" =~ ^# ]]; then
                print_status "Installing extension: $extension"
                code --install-extension "$extension" --force
            fi
        done < "$DOTFILES_VSCODE_DIR/extensions.txt"
        print_success "Extensions installation completed"
    else
        print_warning "Extensions file not found or VS Code CLI not available"
    fi
}

# Main setup function
setup_vscode_dotfiles() {
    print_status "Setting up VS Code dotfiles..."
    
    # Ensure dotfiles directory exists
    if [ ! -d "$DOTFILES_VSCODE_DIR" ]; then
        print_error "Dotfiles VS Code directory not found: $DOTFILES_VSCODE_DIR"
        exit 1
    fi
    
    # Create symlinks for configuration files
    create_symlink "$DOTFILES_VSCODE_DIR/settings.json" "$VSCODE_USER_DIR/settings.json" "settings.json"
    create_symlink "$DOTFILES_VSCODE_DIR/keybindings.json" "$VSCODE_USER_DIR/keybindings.json" "keybindings.json"
    
    # Handle snippets directory if it exists
    if [ -d "$DOTFILES_VSCODE_DIR/snippets" ]; then
        create_symlink "$DOTFILES_VSCODE_DIR/snippets" "$VSCODE_USER_DIR/snippets" "snippets directory"
    fi
    
    print_success "VS Code dotfiles setup completed!"
}

# Function to sync from current VS Code config to dotfiles
sync_from_vscode() {
    print_status "Syncing from VS Code to dotfiles..."
    
    # Copy current VS Code settings to dotfiles if they exist and dotfiles are symlinks
    if [ -f "$VSCODE_USER_DIR/settings.json" ] && [ ! -L "$VSCODE_USER_DIR/settings.json" ]; then
        cp "$VSCODE_USER_DIR/settings.json" "$DOTFILES_VSCODE_DIR/settings.json"
        print_success "Copied settings.json to dotfiles"
    fi
    
    if [ -f "$VSCODE_USER_DIR/keybindings.json" ] && [ ! -L "$VSCODE_USER_DIR/keybindings.json" ]; then
        cp "$VSCODE_USER_DIR/keybindings.json" "$DOTFILES_VSCODE_DIR/keybindings.json"
        print_success "Copied keybindings.json to dotfiles"
    fi
    
    # Update extensions list
    update_extensions_list
}

# Parse command line arguments
case "${1:-setup}" in
    "setup"|"link")
        setup_vscode_dotfiles
        ;;
    "sync")
        sync_from_vscode
        setup_vscode_dotfiles
        ;;
    "extensions")
        if [ "${2:-}" = "install" ]; then
            install_extensions
        elif [ "${2:-}" = "update" ]; then
            update_extensions_list
        else
            echo "Usage: $0 extensions [install|update]"
            exit 1
        fi
        ;;
    "help"|"-h"|"--help")
        echo "VS Code Dotfiles Manager"
        echo ""
        echo "Usage: $0 [command]"
        echo ""
        echo "Commands:"
        echo "  setup, link     Create symlinks from dotfiles to VS Code config (default)"
        echo "  sync            Copy current VS Code config to dotfiles, then setup symlinks"
        echo "  extensions install    Install all extensions from extensions.txt"
        echo "  extensions update     Update extensions.txt with currently installed extensions"
        echo "  help            Show this help message"
        echo ""
        echo "Paths:"
        echo "  VS Code config: $VSCODE_USER_DIR"
        echo "  Dotfiles:       $DOTFILES_VSCODE_DIR"
        ;;
    *)
        print_error "Unknown command: $1"
        echo "Use '$0 help' for usage information"
        exit 1
        ;;
esac
